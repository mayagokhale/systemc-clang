<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="HDLHnode_8cpp" kind="file" language="C++">
    <compoundname>HDLHnode.cpp</compoundname>
    <includes local="no">assert.h</includes>
    <includes refid="HDLHnode_8h" local="yes">HDLHnode.h</includes>
    <includes local="yes">clang/Basic/Diagnostic.h</includes>
    <incdepgraph>
      <node id="57">
        <label>InterfaceDecl.h</label>
        <link refid="InterfaceDecl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>clang/AST/Decl.h</label>
      </node>
      <node id="56">
        <label>queue</label>
      </node>
      <node id="7">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="35">
        <label>clang/Analysis/CFG.h</label>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="18">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="34">
        <label>clang/AST/ParentMap.h</label>
      </node>
      <node id="68">
        <label>hNode.h</label>
        <link refid="hNode_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>clang/Analysis/CFGStmtMap.h</label>
      </node>
      <node id="4">
        <label>SystemCClang.h</label>
        <link refid="SystemCClang_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="6">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="64">
        <label>InstanceMatcher.h</label>
        <link refid="InstanceMatcher_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>clang/Frontend/CompilerInstance.h</label>
      </node>
      <node id="48">
        <label>FindSimTime.h</label>
        <link refid="FindSimTime_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>clang/AST/ASTConsumer.h</label>
      </node>
      <node id="9">
        <label>clang/Frontend/FrontendPluginRegistry.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="70">
        <label>clang/Basic/Diagnostic.h</label>
      </node>
      <node id="45">
        <label>json.hpp</label>
      </node>
      <node id="51">
        <label>FindEntryFunctions.h</label>
        <link refid="FindEntryFunctions_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>FindTemplateTypes.h</label>
        <link refid="FindTemplateTypes_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>PortMatcher.h</label>
        <link refid="PortMatcher_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>WaitContainer.h</label>
        <link refid="WaitContainer_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>NotifyContainer.h</label>
        <link refid="NotifyContainer_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>EventContainer.h</label>
        <link refid="EventContainer_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>clang/ASTMatchers/ASTMatchers.h</label>
      </node>
      <node id="12">
        <label>model/Model.h</label>
        <link refid="Model_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>clang/AST/Expr.h</label>
      </node>
      <node id="32">
        <label>Automata.h</label>
        <link refid="Automata_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>plugins/hdl/HDLHnode.cpp</label>
        <link refid="HDLHnode_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>FindNetlist.h</label>
        <link refid="FindNetlist_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>clang/AST/Type.h</label>
      </node>
      <node id="60">
        <label>ProcessDecl.h</label>
        <link refid="ProcessDecl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>systemc-clang.h</label>
        <link refid="systemc-clang_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Matchers.h</label>
        <link refid="Matchers_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>Tree.h</label>
        <link refid="Tree_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>stack</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
      <node id="11">
        <label>clang/Tooling/Tooling.h</label>
      </node>
      <node id="59">
        <label>PortDecl.h</label>
        <link refid="PortDecl_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sstream</label>
      </node>
      <node id="49">
        <label>ModuleInstance.h</label>
        <link refid="ModuleInstance_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>SuspensionAutomata.h</label>
        <link refid="SuspensionAutomata_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>FindNotify.h</label>
        <link refid="FindNotify_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>clang/AST/ExprCXX.h</label>
      </node>
      <node id="3">
        <label>HDLHnode.h</label>
        <link refid="HDLHnode_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>PortBinding.h</label>
        <link refid="PortBinding_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>SCuitable/FindGPUMacro.h</label>
        <link refid="FindGPUMacro_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>deque</label>
      </node>
      <node id="27">
        <label>FindWait.h</label>
        <link refid="FindWait_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>FindConstructor.h</label>
        <link refid="FindConstructor_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>llvm/Support/Debug.h</label>
      </node>
      <node id="39">
        <label>Utility.h</label>
        <link refid="Utility_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>ModuleInstanceType.h</label>
        <link refid="ModuleInstanceType_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>SensitivityMatcher.h</label>
        <link refid="SensitivityMatcher_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>EntryFunctionContainer.h</label>
        <link refid="EntryFunctionContainer_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>clang/AST/DeclCXX.h</label>
      </node>
      <node id="42">
        <label>FindGlobalEvents.h</label>
        <link refid="FindGlobalEvents_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="61">
        <label>SignalDecl.h</label>
        <link refid="SignalDecl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>clang/ASTMatchers/ASTMatchFinder.h</label>
      </node>
      <node id="67">
        <label>set</label>
      </node>
      <node id="10">
        <label>clang/Tooling/CommonOptionsParser.h</label>
      </node>
      <node id="52">
        <label>FindTLMInterfaces.h</label>
        <link refid="FindTLMInterfaces_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>algorithm</label>
      </node>
      <node id="38">
        <label>stdio.h</label>
      </node>
      <node id="24">
        <label>ArrayTypeUtils.h</label>
        <link refid="ArrayTypeUtils_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesystemc__hdl">systemc_hdl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="HDLHnode_8h" kindref="compound">HDLHnode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/Basic/Diagnostic.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__hdl" kindref="compound">systemc_hdl</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesystemc__hdl_1aa4f5fdd5dce280588fa1f4c2bd033077" kindref="member">is_numeric</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(c))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1ada903ad06f49d577b84e3f0ad3bb5585" kindref="member">HDLConstructorHcode::RemoveSCMethod</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.erase(<sp/>std::remove_if(<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin(),<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end(),<sp/>[]<sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//((x-&gt;h_op==hNode::hdlopsEnum::hVarAssign)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(x-&gt;child_list.size()==2)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(x-&gt;child_list.back()-&gt;h_op<sp/>!=<sp/>hNode::hdlopsEnum::hLiteral))<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hVardecl)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>index<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hMethodCall)<sp/>||<sp/>//<sp/>sc_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hReturnStmt)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>return<sp/>stmt<sp/>in<sp/>init<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hUnimpl));}),<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end()<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpi<sp/>:hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1ada903ad06f49d577b84e3f0ad3bb5585" kindref="member">RemoveSCMethod</ref>(hpi);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a68068d9877cbf140acc7d086639db591" kindref="member">HDLConstructorHcode::CleanupInitHcode</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.erase(<sp/>std::remove_if(<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin(),<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end(),<sp/>[]<sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(((x-&gt;h_op==hNode::hdlopsEnum::hBinop)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_name==pbstring)<sp/>||<sp/>(x-&gt;h_name==sensop))<sp/>||</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hSensvar)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>gratuitous<sp/>sim<sp/>method<sp/>sens<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;child_list[0]-&gt;h_name.find(localstr)<sp/>!=<sp/>std::string::npos))<sp/>||</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op==hNode::hdlopsEnum::hForStmt)<sp/>||</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hVardeclrn)<sp/><sp/>||<sp/></highlight><highlight class="comment">//<sp/>renamed<sp/>index<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x-&gt;h_op==hNode::hdlopsEnum::hCStmt)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;child_list.empty()))<sp/>||</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_op==hNode::hdlopsEnum::hVarAssign)<sp/>||</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x-&gt;h_op==hNode::hdlopsEnum::hMethodCall)<sp/>&amp;&amp;<sp/>(x-&gt;h_name.find(strsccore)<sp/>!=std::string::npos))<sp/>||</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hNoop)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x-&gt;h_name==arrsub)));}),<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpi<sp/>:hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a68068d9877cbf140acc7d086639db591" kindref="member">CleanupInitHcode</ref>(hpi);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a346a0da5c4e787647adc16e63f527640" kindref="member">HDLConstructorHcode::PushRange</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp,<sp/>std::vector&lt;for_info_t&gt;<sp/>&amp;for_info)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>for_info_t<sp/>tmp{</highlight><highlight class="stringliteral">&quot;FORNAME&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>1,<sp/>1,<sp/>0};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hlo<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hi<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hstep<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[2];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hlo-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hVarAssign)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size()<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;<sp/>h_op<sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_op<sp/>==<sp/><sp/>hNode::hdlopsEnum::hLiteral))<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp.name<sp/>=<sp/>hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>--<sp/>put<sp/>in<sp/>error<sp/>message<sp/>if<sp/>not<sp/>a<sp/>numeric<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesystemc__hdl_1aa4f5fdd5dce280588fa1f4c2bd033077" kindref="member">is_numeric</ref>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_name))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.lo<sp/>=<sp/>stoi(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_name);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hi-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hBinop)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size()<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;<sp/>h_op<sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>(hlo-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_op<sp/>==<sp/><sp/>hNode::hdlopsEnum::hLiteral))<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>names<sp/>are<sp/>same<sp/>...<sp/>tmp.name<sp/>=<sp/>hlo-&gt;child_list[0]-&gt;h_name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>--<sp/>put<sp/>in<sp/>error<sp/>message<sp/>if<sp/>not<sp/>a<sp/>numeric<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacesystemc__hdl_1aa4f5fdd5dce280588fa1f4c2bd033077" kindref="member">is_numeric</ref>(hi-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_name))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.hi<sp/>=<sp/>stoi(hi-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_name);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>for_info.push_back(tmp);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1abbad8033124d9af4a8fee96f31a3195f" kindref="member">HDLConstructorHcode::PopRange</ref>(std::vector&lt;for_info_t&gt;<sp/>&amp;for_info)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for_info.pop_back();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a16cdcd5153ca3c23537b9970ba1096ce" kindref="member">HDLConstructorHcode::SubstituteIndex</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp,<sp/>std::vector&lt;for_info_t&gt;<sp/>&amp;for_info)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>for_info.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;<sp/>(hp-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>==<sp/>for_info[i].name))<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>=<sp/><ref refid="namespacesystemc__clang_1a1b591007cd72b04c83e568db359ca573" kindref="member">to_string</ref>(for_info[i].curix);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>=<sp/>hNode::hdlopsEnum::hLiteral;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpi<sp/>:<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a16cdcd5153ca3c23537b9970ba1096ce" kindref="member">SubstituteIndex</ref>(hpi,<sp/>for_info);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1adea88dbd8d04f1b28ce8f35337fa4425" kindref="member">HDLConstructorHcode::HnodeDeepCopy</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hp)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hp-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref>,<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hchild<sp/>:<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(<ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1adea88dbd8d04f1b28ce8f35337fa4425" kindref="member">HnodeDeepCopy</ref>(hchild));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h_ret;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>port<sp/>binding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>dismantle<sp/>modname##field:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modname<sp/>is<sp/>the<sp/>h_name<sp/>for<sp/>the<sp/>portbinding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>field<sp/>is<sp/>the<sp/>varref,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>0:<sp/>hBinop<sp/>()<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hVarref<sp/>u_fwd_cast##clk<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hVarref<sp/>clk<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>if<sp/>the<sp/>submod<sp/>instance/port<sp/>is<sp/>ARRAYSUBSCRIPT<sp/>in<sp/>loop,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>have<sp/>(if<sp/>submodule<sp/>is<sp/>not<sp/>an<sp/>array<sp/>of<sp/>submods)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>hBinop<sp/>()<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>u_fwd_cast##m_block<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>c_fc_block<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>it<sp/>will<sp/>look<sp/>like<sp/>this<sp/>if<sp/>submod<sp/>is<sp/>array<sp/>(<sp/>u_yt[_local_0].clk:clk<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>hBinop<sp/>()<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hVarref<sp/>clk<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>u_yt<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hVarref<sp/>clk<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>for<sp/>module<sp/>instance<sp/>array<sp/>ref<sp/>and<sp/>port<sp/>array<sp/>ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>3:<sp/>hBinop<sp/>()<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hVarref<sp/>m_port<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>u_xt<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_1<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>c_xt_data<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_1<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a08d960ba2199c528143f227a050647f4" kindref="member">HDLConstructorHcode::UnrollBinding</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp_orig,<sp/>std::vector&lt;for_info_t&gt;<sp/>&amp;for_info)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>((hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hBinop)<sp/>&amp;&amp;<sp/>(hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>==<sp/>pbstring));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(for_info.empty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>simple<sp/>case,<sp/>not<sp/>in<sp/>a<sp/>for<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>submodport<sp/>=<sp/>hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>thismodsig<sp/>=<sp/>hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]-&gt;h_name;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>before<sp/>delimiter<sp/>is<sp/>submodule<sp/>name,<sp/>after<sp/>delimiter<sp/>is<sp/>port<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(submodport.substr(0,<sp/>submodport.find(fielddelim)),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hPortbinding);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hpb-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(submodport.substr(submodport.find(fielddelim)+fielddelim.size()),</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hVarref));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hpb-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(thismodsig,<sp/>hNode::hdlopsEnum::hVarref));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a4e57797945f1096c2b9eb20af61c605a" kindref="member">hnewpb</ref>-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(hpb);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hp<sp/>=<sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1adea88dbd8d04f1b28ce8f35337fa4425" kindref="member">HnodeDeepCopy</ref>(hp_orig);<sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>modifying<sp/>subtrees,<sp/>so<sp/>make<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hsubmodport<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];<sp/><sp/></highlight><highlight class="comment">//<sp/>submoduleport<sp/>being<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hthismodsig<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>submodport{</highlight><highlight class="stringliteral">&quot;XXX&quot;</highlight><highlight class="normal">},<sp/>thismodsig{</highlight><highlight class="stringliteral">&quot;YYY&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>submod{</highlight><highlight class="stringliteral">&quot;SUBMOD&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hsubmodport-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/><sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;<sp/>(hsubmodport-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size()<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>for<sp/>loop,<sp/>unroll<sp/>the<sp/>port<sp/>bindings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hVarref<sp/>clk<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hBinop<sp/>ARRAYSUBSCRIPT<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>u_yt<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>_local_0<sp/>NOLIST<sp/>//<sp/>changed<sp/>to<sp/>hLiteral<sp/>by<sp/>Substitute<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hVarref<sp/>clk<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hportchild<sp/>=<sp/>hsubmodport-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hparent<sp/>=<sp/>hsubmodport;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((hportchild<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(hportchild-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>==<sp/>arrsub))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;child_list.empty()))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>simple<sp/>varref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>submod<sp/>=<sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name;<sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>hparent<sp/>=<sp/>hportchild;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>hportchild<sp/>=<sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hsubmodixname<sp/>=<sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ixname<sp/>=<sp/>hsubmodixname-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>for_info.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(for_info[i].name<sp/>==<sp/>ixname)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>submod+=tokendelim+<ref refid="namespacesystemc__clang_1a1b591007cd72b04c83e568db359ca573" kindref="member">to_string</ref>(for_info[i].curix);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hparent-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.pop_back();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>hportchild;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsubmodport-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>==<sp/><sp/>arrsub)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>Case<sp/>1,<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hportchild<sp/>=<sp/>hsubmodport-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hparent<sp/>=<sp/>hsubmodport;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((hportchild<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((hportchild-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>==<sp/>arrsub)<sp/>||</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((hportchild-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size()<sp/>&gt;<sp/>0))))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>hparent<sp/>=<sp/>hportchild;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>hportchild<sp/>=<sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hportchild<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(hportchild-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hVarref))<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hportchild-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.empty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>submod<sp/>=<sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>submod.find(fielddelim);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>found<sp/>!=<sp/>std::string::npos)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>module<sp/>name<sp/>prefix,<sp/>not<sp/>a<sp/>vector<sp/>of<sp/>modules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hportchild-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>=<sp/>submod.substr(found+fielddelim.size());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>submod<sp/>=<sp/>submod.substr(0,<sp/>found);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Varref<sp/>has<sp/>child;<sp/>need<sp/>to<sp/>handle<sp/>Case<sp/>3<sp/>by<sp/>removing<sp/>the<sp/>(arraysubscript<sp/>submod<sp/>ix)<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hsubmodixname<sp/>=<sp/>hparent-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ixname<sp/>=<sp/>hsubmodixname-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>for_info.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(for_info[i].name<sp/>==<sp/>ixname)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>submod+=tokendelim+<ref refid="namespacesystemc__clang_1a1b591007cd72b04c83e568db359ca573" kindref="member">to_string</ref>(for_info[i].curix);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hparent-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>=<sp/>hNode::hdlopsEnum::hNoop;<sp/></highlight><highlight class="comment">//<sp/>get<sp/>rid<sp/>of<sp/>mod<sp/>instance<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hparent-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.clear();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(<sp/>submod,<sp/>hNode::hdlopsEnum::hPortbinding);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hpb-&gt;child_list.push_back(new<sp/>hNode(submodport+tokendelim+to_string(i),<sp/>hNode::hdlopsEnum::hVarref));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hpb-&gt;child_list.push_back(new<sp/>hNode(thismodsig+tokendelim+to_string(i),<sp/>hNode::hdlopsEnum::hVarref));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>hpb-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(hsubmodport);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>hpb-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(hthismodsig);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a16cdcd5153ca3c23537b9970ba1096ce" kindref="member">SubstituteIndex</ref>(hpb,<sp/>for_info);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a4e57797945f1096c2b9eb20af61c605a" kindref="member">hnewpb</ref>-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(hpb);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a11394e7cefee35cd54676c564b965b83" kindref="member">HDLConstructorHcode::SetupSenslist</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hp)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hMethodCall<sp/>sc_coresc_simcontextcreate_method_process:create_method_process<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hMethodCall<sp/>sc_coresc_get_curr_simcontext:sc_get_curr_simcontext<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hUnimpl<sp/>StringLiteral<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hLiteral<sp/>0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hUnop<sp/>&amp;<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hMethodCall<sp/>zhwencode_blockfp_t11_52_2mc_proc:mc_proc<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hUnimpl<sp/>CXXThisExpr<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hLiteral<sp/>0<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hMethodCall)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpi:<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hpi-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hUnop)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>found<sp/>=<sp/>(hpi-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name).find(qualnamedelim);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>found<sp/>!=<sp/>std::string::npos)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>SC_METHOD<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hpi-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name.substr(found+1),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hSenslist));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>got<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>couldn&apos;t<sp/>find<sp/>the<sp/>&quot;:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hpi-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name,<sp/>hNode::hdlopsEnum::hSenslist));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a05248920aca5bbbd4e1bd5c4e76b801f" kindref="member">HDLConstructorHcode::UnrollSensitem</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp_orig,<sp/>std::vector&lt;for_info_t&gt;<sp/>&amp;for_info)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hBinop<sp/>&lt;&lt;<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>sensitive<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>hNoop<sp/>pos<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>clk<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>list<sp/>of<sp/>sens<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitSensitem(hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]))<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a05248920aca5bbbd4e1bd5c4e76b801f" kindref="member">UnrollSensitem</ref>(hp_orig-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0],<sp/>for_info);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>a<sp/>primitive<sp/>sens<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hp<sp/>=<sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1adea88dbd8d04f1b28ce8f35337fa4425" kindref="member">HnodeDeepCopy</ref>(hp_orig);<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>keep<sp/>the<sp/>subtrees<sp/>when<sp/>the<sp/>original<sp/>tree<sp/>gets<sp/>released</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>=<sp/>hNode::hdlopsEnum::hSensvar;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref><sp/>=<sp/>noname;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];<sp/></highlight><highlight class="comment">//<sp/>release<sp/>that<sp/>hnode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.erase(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin());<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>first<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!for_info.empty())<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a16cdcd5153ca3c23537b9970ba1096ce" kindref="member">SubstituteIndex</ref>(hp,<sp/>for_info);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>edge<sp/>sensitivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>hSensvar<sp/>pos<sp/>[<sp/><sp/>&lt;--<sp/>hp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>hNoop<sp/>pos<sp/>[<sp/><sp/><sp/>&lt;--<sp/>hedge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>clk<sp/>NOLIST<sp/>&lt;--<sp/>hedge-&gt;child_list[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEdge(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hedge<sp/>=<sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]<sp/>=<sp/>hedge-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hedge-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.pop_back();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(hedge);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSimEvent(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;h_name))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hSensvar<sp/>NONAME<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hNoop<sp/>value_changed_event<sp/>[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hVarref<sp/>c_fp##ready<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>hNoop<sp/>always<sp/>NOLIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>htmp<sp/>=<sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0]-&gt;child_list[0];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.erase(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin());</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(htmp);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight><highlight class="stringliteral">&quot;always&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hNoop));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>.back()-&gt;child_list.push_back(hp);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1af6bb68caced4b2ead1de429b68da3f47" kindref="member">HDLConstructorHcode::HDLLoop</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hp,<sp/>std::vector&lt;for_info_t&gt;<sp/>&amp;for_info<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>in<sp/>order<sp/>of<sp/>expected<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitPB(hp))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a08d960ba2199c528143f227a050647f4" kindref="member">UnrollBinding</ref>(hp,<sp/>for_info);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitSensitem(hp))<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a05248920aca5bbbd4e1bd5c4e76b801f" kindref="member">UnrollSensitem</ref>(hp,<sp/>for_info);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hForStmt)<sp/>&amp;&amp;<sp/>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size()<sp/>&gt;<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a346a0da5c4e787647adc16e63f527640" kindref="member">PushRange</ref>(hp,<sp/>for_info);<sp/></highlight><highlight class="comment">//<sp/>fill<sp/>in<sp/>name,<sp/>lo,<sp/>hi,<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forloopix<sp/>=<sp/>for_info.back().lo;<sp/>forloopix<sp/>&lt;<sp/>for_info.back().hi;<sp/>forloopix+=for_info.back().step)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>for_info.back().curix<sp/>=<sp/>forloopix;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=3;<sp/>i&lt;hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitPB(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i]))<sp/>{</highlight><highlight class="comment">//<sp/>hcode<sp/>indicating<sp/>port<sp/>binding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a08d960ba2199c528143f227a050647f4" kindref="member">UnrollBinding</ref>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i],<sp/>for_info);<sp/></highlight><highlight class="comment">//<sp/>unroll<sp/>all<sp/>bindings<sp/>in<sp/>this<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitSensitem(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i]))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>hcode<sp/>indicating<sp/>sensitivity<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a05248920aca5bbbd4e1bd5c4e76b801f" kindref="member">UnrollSensitem</ref>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i],<sp/>for_info);<sp/></highlight><highlight class="comment">//<sp/>unroll<sp/>all<sp/>sensitems<sp/>in<sp/>this<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i]-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hForStmt)<sp/>||</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i]-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hCStmt))</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1af6bb68caced4b2ead1de429b68da3f47" kindref="member">HDLLoop</ref>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[i],<sp/>for_info);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for_info.pop_back();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;<ref refid="classhnode_1_1hNode_1a18abdaf770d5490367b9846b0896bdec" kindref="member">h_op</ref><sp/>==<sp/>hNode::hdlopsEnum::hCStmt)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hpc:hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1af6bb68caced4b2ead1de429b68da3f47" kindref="member">HDLLoop</ref>(hpc,<sp/>for_info);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMethodCall(hp))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>hVarAssign<sp/>child[1]<sp/>is<sp/>a<sp/>method<sp/>call;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a11394e7cefee35cd54676c564b965b83" kindref="member">SetupSenslist</ref>(hp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>points<sp/>to<sp/>first<sp/>hMethodCall,<sp/>push<sp/>SC_METHOD<sp/>name<sp/>onto<sp/>hnewsens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>oops<sp/>couldn&apos;t<sp/>parse<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(<sp/></highlight><highlight class="stringliteral">&quot;METHOD<sp/>???&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hSenslist));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a336155f74c106eeccd2a05810fe5ca10" kindref="member">HDLConstructorHcode::ProcessCXXConstructorHcode</ref>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>xconstructor)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;for_info_t&gt;<sp/>for_info;<sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xconstructor==</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xconstructor;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>workaround<sp/>to<sp/>make<sp/>lldb<sp/>find<sp/>dumphcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>lldb<sp/>doesn&apos;t<sp/>pick<sp/>up<sp/>default<sp/>parameters<sp/>in<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>doesn&apos;t<sp/>recognize<sp/>llvm::outs()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>junk<sp/>=2;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(junk!=2)<sp/>xconstructor-&gt;<ref refid="classhnode_1_1hNode_1a17a5ed3f65caf754c1b9099169deff5b" kindref="member">dumphcode</ref>();}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1ada903ad06f49d577b84e3f0ad3bb5585" kindref="member">RemoveSCMethod</ref>(xconstructor);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a4e57797945f1096c2b9eb20af61c605a" kindref="member">hnewpb</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(xconstructor-&gt;<ref refid="classhnode_1_1hNode_1a3f80d521bb4068a6e86718a6ace723d8" kindref="member">h_name</ref>,<sp/>hNode::hdlopsEnum::hPortbindings);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>name<sp/>should<sp/>be<sp/>the<sp/>SC_METHOD<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hnewsens<sp/>=<sp/>new<sp/>hNode(xconstructor-&gt;h_name,<sp/>hNode::hdlopsEnum::hSenslist);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hp<sp/>:<sp/>xconstructor-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1af6bb68caced4b2ead1de429b68da3f47" kindref="member">HDLLoop</ref>(hp,<sp/>for_info);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a4e57797945f1096c2b9eb20af61c605a" kindref="member">hnewpb</ref>-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xconstructor-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(<ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a4e57797945f1096c2b9eb20af61c605a" kindref="member">hnewpb</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>onesens:<sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1afca50bae03fd257b2420ebda5df3a5a9" kindref="member">hnewsens</ref>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!onesens-&gt;child_list.empty())<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xconstructor-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(onesens);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__hdl_1_1HDLConstructorHcode_1a68068d9877cbf140acc7d086639db591" kindref="member">CleanupInitHcode</ref>(xconstructor);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xconstructor;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="plugins/hdl/HDLHnode.cpp"/>
  </compounddef>
</doxygen>
