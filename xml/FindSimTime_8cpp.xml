<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FindSimTime_8cpp" kind="file" language="C++">
    <compoundname>FindSimTime.cpp</compoundname>
    <includes refid="FindSimTime_8h" local="yes">FindSimTime.h</includes>
    <incdepgraph>
      <node id="6">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="7">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="5">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="9">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="2">
        <label>FindSimTime.h</label>
        <link refid="FindSimTime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="1">
        <label>src/matchers/FindSimTime.cpp</label>
        <link refid="FindSimTime_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Utility.h</label>
        <link refid="Utility_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>clang/AST/DeclCXX.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FindSimTime_8h" kindref="compound">FindSimTime.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindSimTime_1adac82fcd7f772ca45341fabdf3186eb9" kindref="member">FindSimTime::FindSimTime</ref>(FunctionDecl<sp/>*tuDecl,<sp/>llvm::raw_ostream<sp/>&amp;os)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>os_(os)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>_sigInst{nullptr},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>call_expr_{nullptr}<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>assert(!(tuDecl<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>TraverseDecl(tuDecl);</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">FindSimTime::~FindSimTime()<sp/>{<sp/><ref refid="classsystemc__clang_1_1FindSimTime_1ab11f4f33eae3f1b17de80a2b8f506c84" kindref="member">simulation_time_</ref>.clear();<sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindSimTime_1ac220f4b4e4e5cfc5977227e110e20a36" kindref="member">FindSimTime::VisitCallExpr</ref>(CallExpr<sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;getDirectCallee()-&gt;getNameInfo().getAsString()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;sc_start&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;Found<sp/>sc_start&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;getNumArgs()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;&quot;\n<sp/>Simulation<sp/>time<sp/>is<sp/>:&quot;<sp/>&lt;&lt;<sp/>getArgumentName(c-&gt;getArg(0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;getNumArgs()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>getArgumentName(c-&gt;getArg(1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindSimTime_1ab11f4f33eae3f1b17de80a2b8f506c84" kindref="member">simulation_time_</ref>.insert(<ref refid="classsystemc__clang_1_1FindSimTime_1a30ac43e1375ecb5fae8c458752de70b4" kindref="member">simulationTimePairType</ref>(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Utility_1a2b89b2bd4d7a3f10974b8904c1798921" kindref="member">getArgumentName</ref>(c-&gt;getArg(0)),<sp/><ref refid="classsystemc__clang_1_1Utility_1a2b89b2bd4d7a3f10974b8904c1798921" kindref="member">getArgumentName</ref>(c-&gt;getArg(1))));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>string<sp/>FindSimTime::getArgumentName<sp/>(Expr<sp/>*<sp/>arg)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>return<sp/>string<sp/>(&quot;NULL&quot;);</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang::LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang::PrintingPolicy<sp/>Policy<sp/>(LangOpts);</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>TypeS;</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::raw_string_ostream<sp/>s<sp/>(TypeS);</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg-&gt;printPretty<sp/>(s,<sp/>0,<sp/>Policy);</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;,<sp/>argument:<sp/>&quot;<sp/>&lt;&lt;<sp/>s.str()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>s.str<sp/>();</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindSimTime_1a825b0d05702c9257ea2e4b7abf29b1a6" kindref="member">FindSimTime::simulationTimeMapType</ref><sp/><ref refid="classsystemc__clang_1_1FindSimTime_1af73d77b43400a142944c9ae2665a5540" kindref="member">FindSimTime::returnSimTime</ref>()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindSimTime_1ab11f4f33eae3f1b17de80a2b8f506c84" kindref="member">simulation_time_</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/matchers/FindSimTime.cpp"/>
  </compounddef>
</doxygen>
