<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FindNotify_8cpp" kind="file" language="C++">
    <compoundname>FindNotify.cpp</compoundname>
    <includes refid="FindNotify_8h" local="yes">FindNotify.h</includes>
    <includes local="yes">clang/AST/DeclTemplate.h</includes>
    <includes local="yes">clang/AST/PrettyPrinter.h</includes>
    <includes local="yes">clang/AST/Type.h</includes>
    <includes local="yes">clang/Basic/SourceManager.h</includes>
    <incdepgraph>
      <node id="10">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="1">
        <label>src/matchers/FindNotify.cpp</label>
        <link refid="FindNotify_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="8">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="4">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="9">
        <label>clang/AST/Type.h</label>
      </node>
      <node id="7">
        <label>clang/AST/DeclTemplate.h</label>
      </node>
      <node id="2">
        <label>FindNotify.h</label>
        <link refid="FindNotify_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>clang/AST/DeclCXX.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FindNotify_8h" kindref="compound">FindNotify.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/AST/DeclTemplate.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/AST/PrettyPrinter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/AST/Type.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/Basic/SourceManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindNotify_1a5eec0820bdab62f92175aa3076af7d4e" kindref="member">FindNotify::FindNotify</ref>(CXXMethodDecl<sp/>*d,<sp/>llvm::raw_ostream<sp/>&amp;os)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>entry_method_decl_(d),<sp/>os_(os),<sp/>notify_call_{nullptr}<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>TraverseDecl(d);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">FindNotify::~FindNotify()<sp/>{<sp/><ref refid="classsystemc__clang_1_1FindNotify_1a3a49ad8c12643d399b9e1c76a5d30979" kindref="member">notify_call_list_</ref>.clear();<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindNotify_1a39cfc189de65ee37ae8c4784a4c32200" kindref="member">FindNotify::shouldVisitTemplateInstantiations</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindNotify_1ab308c807a7d7e7c43b8461a509d39eac" kindref="member">FindNotify::VisitCallExpr</ref>(CallExpr<sp/>*e)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>e-&gt;dumpAll();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>direct_callee{e-&gt;getDirectCallee()};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direct_callee<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direct_callee-&gt;getNameInfo().getAsString()<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;notify&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;getNumArgs()<sp/>&lt;=<sp/>2)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>a<sp/>better<sp/>checking.....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindNotify_1a3a49ad8c12643d399b9e1c76a5d30979" kindref="member">notify_call_list_</ref>.push_back(e);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>the<sp/>&apos;x&apos;<sp/>from<sp/>x.f(5)<sp/>I<sp/>must<sp/>use<sp/>getImplicitObjectArgument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>exprName;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(MemberExpr<sp/>*me<sp/>=<sp/>dyn_cast&lt;MemberExpr&gt;(e-&gt;getCallee()))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprName<sp/>=<sp/>getArgumentName(me-&gt;getBase()-&gt;IgnoreImpCasts());</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(_processNotifyEventMap.find(entry_method_decl_)<sp/>!=</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.end()){</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processNotifyEventMapType::iterator<sp/>processFound<sp/>=</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.find(entry_method_decl_);<sp/>vector&lt;string&gt;<sp/>tmp<sp/>=</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processFound-&gt;second;<sp/>tmp.push_back(exprName);</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.erase(entry_method_decl_);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.insert(processNotifyEventPairType(entry_method_decl_,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp));</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.push_back(exprName);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.insert(processNotifyEventPairType(entry_method_decl_,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp));</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>string<sp/>FindNotify::getArgumentName(Expr*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/>if<sp/>(arg<sp/><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>return<sp/>string(&quot;NULL&quot;);</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>string<sp/>TypeS;</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>llvm::raw_string_ostream<sp/>s(TypeS);</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>arg-&gt;printPretty(s,<sp/>0,<sp/>Policy);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>return<sp/>s.str();</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">CXXMethodDecl<sp/>*<ref refid="classsystemc__clang_1_1FindNotify_1a4ef8908d0c89c509f6bd3a5361c49fee" kindref="member">FindNotify::getEntryMethod</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindNotify_1aaedeeee511f9afc8c1467ce1eaa103e7" kindref="member">entry_method_decl_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindNotify_1aebd5c90665011a52c5037b4953a6796f" kindref="member">FindNotify::NotifyCallListType</ref><sp/><ref refid="classsystemc__clang_1_1FindNotify_1aea9758772262f7d6600895170e250d0d" kindref="member">FindNotify::getNotifyCallList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindNotify_1a3a49ad8c12643d399b9e1c76a5d30979" kindref="member">notify_call_list_</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindNotify_1a409fbbf9662c351ada6fd7e038ffaa49" kindref="member">FindNotify::dump</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;\n<sp/>==============<sp/>FindNotify<sp/>===============&quot;;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;\n:&gt;<sp/>Print<sp/>&apos;notify&apos;<sp/>statement<sp/>informtion\n&quot;;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>notify_call_list_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;:&gt;<sp/>notify<sp/>pointer:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>notify_call_list_[i]<sp/>&lt;&lt;<sp/>&quot;,<sp/>implicit<sp/>arg:</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>\<sp/>getArgumentName(notify_call_list_[i]-&gt;getCallee())<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;<sp/>&quot;\n<sp/>==============<sp/>END<sp/>FindNotify<sp/>===============&quot;;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;&quot;\n<sp/>Process<sp/>and<sp/>events<sp/>they<sp/>notify&quot;;</highlight></codeline>
<codeline lineno="95"><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(processNotifyEventMapType::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>_processNotifyEventMap.begin(),<sp/>eit<sp/>=<sp/>_processNotifyEventMap.end();<sp/>it<sp/>!=</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>eit;<sp/>it++)<sp/>{<sp/>os_<sp/>&lt;&lt;&quot;\n<sp/>Process<sp/>:<sp/>&quot;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;it-&gt;first-&gt;getDeclName().getAsString();<sp/>os_<sp/>&lt;&lt;&quot;\n<sp/>Event<sp/>Notification:<sp/>&quot;;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>tmp<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=0;<sp/>i&lt;tmp.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>os_<sp/>&lt;&lt;tmp.at(i)&lt;&lt;&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/matchers/FindNotify.cpp"/>
  </compounddef>
</doxygen>
