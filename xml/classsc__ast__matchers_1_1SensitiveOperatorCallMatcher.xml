<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher" kind="class" language="C++" prot="public">
    <compoundname>sc_ast_matchers::SensitiveOperatorCallMatcher</compoundname>
    <basecompoundref prot="public" virt="non-virtual">MatchFinder::MatchCallback</basecompoundref>
    <includes refid="SensitivityMatcher_8h" local="no">SensitivityMatcher.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1afa0b896b5167844ee2a6cecea32658d0" prot="private" static="no" mutable="no">
        <type>clang::CXXMemberCallExpr *</type>
        <definition>clang::CXXMemberCallExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::cxx_mcall_</definition>
        <argsstring></argsstring>
        <name>cxx_mcall_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="104" column="28" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1ab2e7f54f3b9afa16e05b22b342844449" prot="private" static="no" mutable="no">
        <type>clang::MemberExpr *</type>
        <definition>clang::MemberExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::me_wo_mcall_</definition>
        <argsstring></argsstring>
        <name>me_wo_mcall_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="105" column="21" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a75aaa41d4faeaeba47765a85e51ca2a9" prot="private" static="no" mutable="no">
        <type>const clang::ArraySubscriptExpr *</type>
        <definition>const clang::ArraySubscriptExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::array_fd_</definition>
        <argsstring></argsstring>
        <name>array_fd_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="106" column="35" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1aa5e80322db3d2b79f8091ee154c5ee2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>clang::CXXMemberCallExpr *</type>
        <definition>clang::CXXMemberCallExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::getMemberExprCallExpr</definition>
        <argsstring>()</argsstring>
        <name>getMemberExprCallExpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="109" column="28" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a8b346cc7f658102b8058ab04a0d140e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>clang::MemberExpr *</type>
        <definition>clang::MemberExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::getMemberExprWithoutCall</definition>
        <argsstring>()</argsstring>
        <name>getMemberExprWithoutCall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="111" column="21" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a28efe6a6fc2dce756d75d15bda1cadd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const clang::ArraySubscriptExpr *</type>
        <definition>const clang::ArraySubscriptExpr* sc_ast_matchers::SensitiveOperatorCallMatcher::getMemberArraySubscriptExpr</definition>
        <argsstring>()</argsstring>
        <name>getMemberArraySubscriptExpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="112" column="35" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1ae5608408a7e875644df406ca043a5f53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::SensitiveOperatorCallMatcher::registerMatchers</definition>
        <argsstring>(MatchFinder &amp;finder)</argsstring>
        <name>registerMatchers</name>
        <param>
          <type>MatchFinder &amp;</type>
          <declname>finder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the main matcher for identifying sensitivity lists.</para>
<para>The matcher starts in the constructor of a SystemC module.<orderedlist>
<listitem><para>Within the constructor, we need to identify operator&lt;&lt; since that is the overloaded member used to add sensitivity parameters.</para>
</listitem><listitem><para>We want to find every operator&lt;&lt; call with an argument, and those that have the FieldDecl used to be of a certain type (sc_event, sc_interface, ...). This is done because those are the parameters that are allowed for the operator&lt;&lt;.</para>
</listitem></orderedlist>
</para>
<para>2a. For the argument, we identify a call expression (cxxMemberCallExpr), or just a MemberExpr that has a declaration of a FieldDecl. 2b. The parameters that are allowed in operator&lt;&lt; are the following.<itemizedlist>
<listitem><para>sc_event</para>
</listitem><listitem><para>sc_interface</para>
</listitem><listitem><para>sc_event_finder</para>
</listitem><listitem><para>sc_port_base </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>clang-format on</para>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="136" column="8" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="136" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a0eb9b60064a4df2eff0d7fb95ce4973b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void sc_ast_matchers::SensitiveOperatorCallMatcher::run</definition>
        <argsstring>(const MatchFinder::MatchResult &amp;result)</argsstring>
        <name>run</name>
        <param>
          <type>const MatchFinder::MatchResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/SensitivityMatcher.h" line="175" column="16" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="175" bodyend="193"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>class <ref refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher" kindref="compound">SensitiveOperatorCallMatcher</ref> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::SensitiveOperatorCallMatcher</label>
        <link refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::SensitiveOperatorCallMatcher</label>
        <link refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/matchers/SensitivityMatcher.h" line="102" column="1" bodyfile="src/matchers/SensitivityMatcher.h" bodystart="102" bodyend="194"/>
    <listofallmembers>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a75aaa41d4faeaeba47765a85e51ca2a9" prot="private" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>array_fd_</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1afa0b896b5167844ee2a6cecea32658d0" prot="private" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>cxx_mcall_</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a28efe6a6fc2dce756d75d15bda1cadd2" prot="public" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>getMemberArraySubscriptExpr</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1aa5e80322db3d2b79f8091ee154c5ee2a" prot="public" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>getMemberExprCallExpr</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a8b346cc7f658102b8058ab04a0d140e5" prot="public" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>getMemberExprWithoutCall</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1ab2e7f54f3b9afa16e05b22b342844449" prot="private" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>me_wo_mcall_</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1ae5608408a7e875644df406ca043a5f53" prot="public" virt="non-virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>registerMatchers</name></member>
      <member refid="classsc__ast__matchers_1_1SensitiveOperatorCallMatcher_1a0eb9b60064a4df2eff0d7fb95ce4973b" prot="public" virt="virtual"><scope>sc_ast_matchers::SensitiveOperatorCallMatcher</scope><name>run</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
