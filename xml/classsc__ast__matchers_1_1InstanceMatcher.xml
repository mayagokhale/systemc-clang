<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classsc__ast__matchers_1_1InstanceMatcher" kind="class" language="C++" prot="public">
    <compoundname>sc_ast_matchers::InstanceMatcher</compoundname>
    <basecompoundref prot="public" virt="non-virtual">MatchFinder::MatchCallback</basecompoundref>
    <includes refid="InstanceMatcher_8h" local="no">InstanceMatcher.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsc__ast__matchers_1_1InstanceMatcher_1a70b046aa0e773c870c2f169dc09b11a6" prot="public" static="no">
        <type>std::tuple&lt; std::string, clang::Decl *, <ref refid="structsc__ast__matchers_1_1ModuleInstanceType" kindref="compound">ModuleInstanceType</ref> &gt;</type>
        <definition>typedef std::tuple&lt;std::string, clang::Decl *, ModuleInstanceType&gt; sc_ast_matchers::InstanceMatcher::InstanceDeclType</definition>
        <argsstring></argsstring>
        <name>InstanceDeclType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="73" column="7" bodyfile="src/matchers/InstanceMatcher.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc__ast__matchers_1_1InstanceMatcher_1a365a93a3acf5d3e4296b0fc3b72de11d" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classsc__ast__matchers_1_1InstanceMatcher_1a70b046aa0e773c870c2f169dc09b11a6" kindref="member">InstanceDeclType</ref> &gt;</type>
        <definition>typedef std::vector&lt;InstanceDeclType&gt; sc_ast_matchers::InstanceMatcher::InstanceDeclarationsType</definition>
        <argsstring></argsstring>
        <name>InstanceDeclarationsType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="74" column="23" bodyfile="src/matchers/InstanceMatcher.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc__ast__matchers_1_1InstanceMatcher_1a2da868d9005b524c65f6dc808f6a6e2b" prot="public" static="no">
        <type>std::pair&lt; clang::Decl *, <ref refid="structsc__ast__matchers_1_1ModuleInstanceType" kindref="compound">ModuleInstanceType</ref> &gt;</type>
        <definition>typedef std::pair&lt;clang::Decl *, ModuleInstanceType&gt; sc_ast_matchers::InstanceMatcher::ModuleInstanceTuple</definition>
        <argsstring></argsstring>
        <name>ModuleInstanceTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store all instances in a map. The map key should be the Decl*. This will work for both FieldDecl (instances within sub-modules) and VarDecl separate modules in sc_main(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="81" column="21" bodyfile="src/matchers/InstanceMatcher.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsc__ast__matchers_1_1InstanceMatcher_1a2565d2317cefa7d03a6765d5370a15e5" prot="public" static="no">
        <type>std::map&lt; clang::Decl *, <ref refid="structsc__ast__matchers_1_1ModuleInstanceType" kindref="compound">ModuleInstanceType</ref> &gt;</type>
        <definition>typedef std::map&lt;clang::Decl *, ModuleInstanceType&gt; sc_ast_matchers::InstanceMatcher::InstanceDeclarations</definition>
        <argsstring></argsstring>
        <name>InstanceDeclarations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="82" column="20" bodyfile="src/matchers/InstanceMatcher.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsc__ast__matchers_1_1InstanceMatcher_1addc84e7ce6b84317f43e41f7f08250c7" prot="private" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1InstanceMatcher_1a365a93a3acf5d3e4296b0fc3b72de11d" kindref="member">InstanceDeclarationsType</ref></type>
        <definition>InstanceDeclarationsType sc_ast_matchers::InstanceMatcher::instances_</definition>
        <argsstring></argsstring>
        <name>instances_</name>
        <briefdescription>
<para>deprecated </para>
        </briefdescription>
        <detaileddescription>
<para>Instances can come in two forms: FieldDecl: this is when they are members of a class. VarDecl : this is when they are simply variables such as in functions or in the <ref refid="namespacehcode2verilog_1ac9789ddccfb7ed9a117def742fc06ac5" kindref="member">main()</ref>.</para>
<para>The way to identify them both together is to look at its base class Decl. Then use dyn_cast&lt;&gt; to detect whether it is one of the two above mentioned types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="95" column="28" bodyfile="src/matchers/InstanceMatcher.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1InstanceMatcher_1ac2b21c735d12ccf05460992aa415a0dc" prot="private" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1InstanceMatcher_1a2565d2317cefa7d03a6765d5370a15e5" kindref="member">InstanceDeclarations</ref></type>
        <definition>InstanceDeclarations sc_ast_matchers::InstanceMatcher::instance_map_</definition>
        <argsstring></argsstring>
        <name>instance_map_</name>
        <briefdescription>
<para>Map of Decl* =&gt; <ref refid="structsc__ast__matchers_1_1ModuleInstanceType" kindref="compound">ModuleInstanceType</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="98" column="24" bodyfile="src/matchers/InstanceMatcher.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a5376976183a68f8d45e6988fa20562a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1InstanceMatcher_1a2565d2317cefa7d03a6765d5370a15e5" kindref="member">InstanceDeclarations</ref> &amp;</type>
        <definition>const InstanceDeclarations&amp; sc_ast_matchers::InstanceMatcher::getInstanceMap</definition>
        <argsstring>()</argsstring>
        <name>getInstanceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="101" column="30" bodyfile="src/matchers/InstanceMatcher.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1acbbca6eaf9fbbc3585f3e18932f13cf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool sc_ast_matchers::InstanceMatcher::findInstanceByVariableType</definition>
        <argsstring>(clang::CXXRecordDecl *decl, std::vector&lt; InstanceDeclType &gt; &amp;found_instances)</argsstring>
        <name>findInstanceByVariableType</name>
        <param>
          <type>clang::CXXRecordDecl *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classsc__ast__matchers_1_1InstanceMatcher_1a70b046aa0e773c870c2f169dc09b11a6" kindref="member">InstanceDeclType</ref> &gt; &amp;</type>
          <declname>found_instances</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="105" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="105" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1ae3317d935480e9288da5234459d0987b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::InstanceMatcher::match_ctor_arg</definition>
        <argsstring>(const std::string &amp;bind_arg_name, const std::string &amp;bind_ctor_expr)</argsstring>
        <name>match_ctor_arg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bind_arg_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>bind_ctor_expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="165" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a87ee03e1e17cf1ffe6f8d2a14d0246d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::InstanceMatcher::makeArraySubModule</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makeArraySubModule</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="171" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a9d0236cbba66632cf6aa5b20056eea0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::InstanceMatcher::registerMatchers</definition>
        <argsstring>(MatchFinder &amp;finder)</argsstring>
        <name>registerMatchers</name>
        <param>
          <type>MatchFinder &amp;</type>
          <declname>finder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>We will have two matchers.</para>
<para>Match when the following conditions are satisifed:<itemizedlist>
<listitem><para>It is a FieldDecl</para>
</listitem><listitem><para>It has a type that is a C++ class that is derived from sc_module</para>
</listitem></itemizedlist>
</para>
<para>These are field members within a class declaration. Hence, we only need to collect their FieldDecl pointers and their variable names. Their instance names would appear when the constructor of the class that has these field members within it. This constructor would use the initialization list to provide an argument, which would be the instance name.</para>
<para>Add the two matchers.</para>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="179" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="179" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a770fd63f4e6a2ae106fda6d1d91f590e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::InstanceMatcher::parseVarDecl</definition>
        <argsstring>(clang::VarDecl *instance_decl, std::string &amp;instance_name)</argsstring>
        <name>parseVarDecl</name>
        <param>
          <type>clang::VarDecl *</type>
          <declname>instance_decl</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>instance_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is the main object&apos;s constructor name</para>
<para>We do not get the instance name from within the field declaration. Get the type of the class of the field.</para>
<para>auto instance_name{cast&lt;StringLiteral&gt;(ctor_arg)-&gt;getString().str()};</para>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="369" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="369" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a932c5e4717cb56e805541329a045b026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::InstanceMatcher::parseFieldDecl</definition>
        <argsstring>(clang::FieldDecl *instance_decl, clang::ValueDecl *parent_decl, std::string instance_name, IndexMapType &amp;index_map)</argsstring>
        <name>parseFieldDecl</name>
        <param>
          <type>clang::FieldDecl *</type>
          <declname>instance_decl</declname>
        </param>
        <param>
          <type>clang::ValueDecl *</type>
          <declname>parent_decl</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>instance_name</declname>
        </param>
        <param>
          <type><ref refid="namespacesc__ast__matchers_1_1utils_1_1array__type_1a8d73d3e8a037eafac89d3561cbafb162" kindref="member">IndexMapType</ref> &amp;</type>
          <declname>index_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get all the 1D, 2D and 3D array type pointers.</para>
<para>We need to set the array_type pointer to the deepest array. That is if it is a 3D array then we need to set it to the third dimension element type to get the correct CXXRecordDecl.</para>
<para>Find if an instance already exists. If it does exist.</para>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="413" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="413" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a9a170c8fb20d0d812ec515cf9c09600f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void sc_ast_matchers::InstanceMatcher::run</definition>
        <argsstring>(const MatchFinder::MatchResult &amp;result)</argsstring>
        <name>run</name>
        <param>
          <type>const MatchFinder::MatchResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>For arrays, an InitListExpr is generated. For non-arrays, CXXConstructExpr is directly castable.</para>
<para>If it is an array, then get to its InitListExpr, and then get the first element&apos;s constructor.</para>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="531" column="16" bodyfile="src/matchers/InstanceMatcher.h" bodystart="531" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1InstanceMatcher_1a5b6ac85a7e4666104cd786415326fe87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::InstanceMatcher::dump</definition>
        <argsstring>()</argsstring>
        <name>dump</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/InstanceMatcher.h" line="624" column="8" bodyfile="src/matchers/InstanceMatcher.h" bodystart="624" bodyend="646"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class <ref refid="classsc__ast__matchers_1_1InstanceMatcher" kindref="compound">InstanceMatcher</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::InstanceMatcher</label>
        <link refid="classsc__ast__matchers_1_1InstanceMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::InstanceMatcher</label>
        <link refid="classsc__ast__matchers_1_1InstanceMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/matchers/InstanceMatcher.h" line="70" column="1" bodyfile="src/matchers/InstanceMatcher.h" bodystart="70" bodyend="647"/>
    <listofallmembers>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a5b6ac85a7e4666104cd786415326fe87" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>dump</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1acbbca6eaf9fbbc3585f3e18932f13cf7" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>findInstanceByVariableType</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a5376976183a68f8d45e6988fa20562a6" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>getInstanceMap</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1ac2b21c735d12ccf05460992aa415a0dc" prot="private" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>instance_map_</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a2565d2317cefa7d03a6765d5370a15e5" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>InstanceDeclarations</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a365a93a3acf5d3e4296b0fc3b72de11d" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>InstanceDeclarationsType</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a70b046aa0e773c870c2f169dc09b11a6" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>InstanceDeclType</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1addc84e7ce6b84317f43e41f7f08250c7" prot="private" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>instances_</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a87ee03e1e17cf1ffe6f8d2a14d0246d7" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>makeArraySubModule</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1ae3317d935480e9288da5234459d0987b" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>match_ctor_arg</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a2da868d9005b524c65f6dc808f6a6e2b" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>ModuleInstanceTuple</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a932c5e4717cb56e805541329a045b026" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>parseFieldDecl</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a770fd63f4e6a2ae106fda6d1d91f590e" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>parseVarDecl</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a9d0236cbba66632cf6aa5b20056eea0d" prot="public" virt="non-virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>registerMatchers</name></member>
      <member refid="classsc__ast__matchers_1_1InstanceMatcher_1a9a170c8fb20d0d812ec515cf9c09600f" prot="public" virt="virtual"><scope>sc_ast_matchers::InstanceMatcher</scope><name>run</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
