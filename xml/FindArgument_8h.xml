<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FindArgument_8h" kind="file" language="C++">
    <compoundname>FindArgument.h</compoundname>
    <includes local="yes">clang/AST/DeclCXX.h</includes>
    <includes local="yes">clang/AST/RecursiveASTVisitor.h</includes>
    <includes local="yes">llvm/Support/raw_ostream.h</includes>
    <includedby refid="FindArgument_8cpp" local="yes">src/matchers/FindArgument.cpp</includedby>
    <includedby refid="SuspensionAutomata_8cpp" local="yes">src/SCuitable/SuspensionAutomata.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="3">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="1">
        <label>src/matchers/FindArgument.h</label>
        <link refid="FindArgument_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>clang/AST/DeclCXX.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/matchers/FindArgument.h</label>
        <link refid="FindArgument_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/matchers/FindArgument.cpp</label>
        <link refid="FindArgument_8cpp"/>
      </node>
      <node id="3">
        <label>src/SCuitable/SuspensionAutomata.cpp</label>
        <link refid="SuspensionAutomata_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classsystemc__clang_1_1FindArgument" prot="public">systemc_clang::FindArgument</innerclass>
    <innernamespace refid="namespacesystemc__clang">systemc_clang</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_FIND_ARGUMENT_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_FIND_ARGUMENT_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/AST/DeclCXX.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/AST/RecursiveASTVisitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;llvm/Support/raw_ostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceclang" kindref="compound">clang</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classsystemc__clang_1_1FindArgument" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsystemc__clang_1_1FindArgument" kindref="compound">FindArgument</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>RecursiveASTVisitor&lt;FindArgument&gt;<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument" kindref="compound">FindArgument</ref>(Expr<sp/>*);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classsystemc__clang_1_1FindArgument" kindref="compound">FindArgument</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VisitMemberExpr(MemberExpr<sp/>*me);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VisitDeclRefExpr(DeclRefExpr<sp/>*de);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VisitIntegerLiteral(IntegerLiteral<sp/>*il);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr<sp/>*bl);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>getArgumentName();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27" refid="classsystemc__clang_1_1FindArgument_1a1e675602a667da1286753f796bd494af" refkind="member"><highlight class="normal"><sp/><sp/>Expr<sp/>*<ref refid="classsystemc__clang_1_1FindArgument_1a1e675602a667da1286753f796bd494af" kindref="member">expression_</ref>;</highlight></codeline>
<codeline lineno="28" refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>systemc_clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/matchers/FindArgument.h"/>
  </compounddef>
</doxygen>
