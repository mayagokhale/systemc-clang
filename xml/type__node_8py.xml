<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="type__node_8py" kind="file" language="Python">
    <compoundname>type_node.py</compoundname>
    <innerclass refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode" prot="public">parselib::transforms::type_node::TypeNode</innerclass>
    <innernamespace refid="namespaceparselib_1_1transforms_1_1type__node">parselib::transforms::type_node</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceparselib_1_1transforms_1_1type__node" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2" refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode" kindref="compound">TypeNode</ref>(object):</highlight></codeline>
<codeline lineno="3"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>represents<sp/>any<sp/>type<sp/>that<sp/>is<sp/>present<sp/>in<sp/>the<sp/>_hdl.txt</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note:<sp/>this<sp/>type<sp/>is<sp/>used<sp/>in<sp/>two<sp/>places:</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>representing<sp/>the<sp/>nested<sp/>type<sp/>itself,<sp/>with<sp/>typedef,<sp/>in<sp/>which<sp/>it<sp/>is<sp/>a<sp/>tree<sp/>like<sp/>structure</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>representing<sp/>the<sp/>type<sp/>instantiation,<sp/>which<sp/>is<sp/>only<sp/>provided<sp/>with<sp/>concrete<sp/>value<sp/>of<sp/>type<sp/>params</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a3d00f6f72fc3be9740e1f0a4f61a942c" kindref="member">__init__</ref>(self,<sp/>name,<sp/>params,<sp/>fields):</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>type<sp/>name</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params:<sp/>type<sp/>parameteres,<sp/>a<sp/>list<sp/>of<sp/>string,<sp/>in<sp/>fp_t,<sp/>this<sp/>would<sp/>be<sp/>E,<sp/>F</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields:<sp/>a<sp/>list<sp/>of<sp/>(string,<sp/>TypeNode)<sp/>tuple,<sp/>representing<sp/>the<sp/>fields,<sp/>a<sp/>primitive<sp/>type<sp/>should<sp/>keep<sp/>this<sp/>as<sp/>empty.<sp/>In<sp/>fp_t,<sp/>this<sp/>would<sp/>be<sp/>(frac,<sp/>...<sp/>),<sp/>(expo,<sp/>...<sp/>),<sp/>(sign,<sp/>...<sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name<sp/>=<sp/>name</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a8451200beb458ed088e1eec9a6c5c10f" kindref="member">params</ref>params<sp/>=<sp/>params</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1acab32d8a6a5044e22bad883d0b43e39f" kindref="member">fields</ref>fields<sp/>=<sp/>fields</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>two<sp/>function<sp/>below<sp/>(bind<sp/>and<sp/>build_param_dict)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a4e750c9fb1fe18fc76d9d133395297fc" kindref="member">build_param_dict</ref>(self,<sp/>params):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>is<sp/>not<sp/>very<sp/>efficient<sp/>-<sp/>could<sp/>be<sp/>improved<sp/>with<sp/>topological<sp/>sorting,<sp/>but<sp/>we<sp/>don&apos;t<sp/>need<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>1.<sp/>map<sp/>type<sp/>parameter<sp/>to<sp/>TypeNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_nodes<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k,<sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a8451200beb458ed088e1eec9a6c5c10f" kindref="member">params</ref>params,<sp/>params):</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_nodes.append((k,<sp/>p))</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved.append((k,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_nodes<sp/>=<sp/>dict(type_nodes)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved<sp/>=<sp/>dict(type_resolved)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved_count<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k,<sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>type_nodes.items():</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(v)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>type(self):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved_count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>2.<sp/>instantiate<sp/>the<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>type_resolved_count<sp/>!=<sp/>len(type_nodes):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>type_nodes.keys():</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type_resolved[k]:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(type_nodes[k].params)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_nodes[k]<sp/>=<sp/>type_nodes[k].<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a32ad5cedc60686e3ad2550ae94feca78" kindref="member">instantiate</ref>()<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_resolved_count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_nodes</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a3d40775eb53865cbef714addced16a57" kindref="member">bind</ref>(self,<sp/>param_list,<sp/>param_dict=None):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>params_dict<sp/>is<sp/>not<sp/>empty,<sp/>use<sp/>params_dict,<sp/>otherwise,<sp/>first<sp/>build<sp/>param<sp/>dict</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently,<sp/>things<sp/>like<sp/>template&lt;E,<sp/>sc_in&lt;E&gt;<sp/>&gt;<sp/>is<sp/>not<sp/>supported</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>param_dict:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_dict<sp/>=<sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a4e750c9fb1fe18fc76d9d133395297fc" kindref="member">build_param_dict</ref>build_param_dict(param_list)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>field_name,<sp/>field_type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1acab32d8a6a5044e22bad883d0b43e39f" kindref="member">fields</ref>fields:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(field_type.params)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instantiate_list<sp/>=<sp/>[<sp/>param_dict[p.name]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>p.name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>param_dict<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>p.instantiate()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>field_type.params<sp/>]</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>field_type.instantiate(params=instantiate_list)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields.append((field_name,<sp/>res))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields.append((field_name,<sp/>field_type.instantiate()))</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fields<sp/>=<sp/>[<sp/>(str(field[0]),<sp/>field[1])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>field<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fields<sp/>]</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aggregate(params=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>fields=fields)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a32ad5cedc60686e3ad2550ae94feca78" kindref="member">instantiate</ref>(self,<sp/>params=None):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>an<sp/>object<sp/>with<sp/>to_str<sp/>for<sp/>the<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_type<sp/>=<sp/>Primitive.get_primitive(self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_int<sp/>=<sp/>re.match(</highlight><highlight class="stringliteral">r&apos;^[-+]?[0-9]+$&apos;</highlight><highlight class="normal">,<sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>print(&apos;Instantiating:<sp/>&apos;,<sp/>self.name,<sp/>&apos;<sp/>with<sp/>&apos;,<sp/>params)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>primitive_type:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>params<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>primitive_type(*list(map(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x.instantiate(),<sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a8451200beb458ed088e1eec9a6c5c10f" kindref="member">params</ref>params)))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>primitive_type(*list(params))</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>is_int:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Non-primitive<sp/>type,<sp/>like<sp/>fp_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>aggregate(params,<sp/>self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1acab32d8a6a5044e22bad883d0b43e39f" kindref="member">fields</ref>fields)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>CType.types.is_custom_type(self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name),<sp/>f</highlight><highlight class="stringliteral">&apos;{self.name}<sp/>is<sp/>not<sp/>a<sp/>custom<sp/>type&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>CType.types.get_custom_type(self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a1e3e7c439ede68d2de0bfcd4ecf64b76" kindref="member">name</ref>name)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.bind(param_list=self.<ref refid="classparselib_1_1transforms_1_1type__node_1_1TypeNode_1a8451200beb458ed088e1eec9a6c5c10f" kindref="member">params</ref>params)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>this<sp/>class<sp/>as<sp/>a<sp/>metaclass<sp/>and<sp/>register<sp/>other<sp/>types?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="plugins/hdl/parselib/transforms/type_node.py"/>
  </compounddef>
</doxygen>
