<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FindTemplateTypes_8cpp" kind="file" language="C++">
    <compoundname>FindTemplateTypes.cpp</compoundname>
    <includes refid="FindTemplateTypes_8h" local="yes">FindTemplateTypes.h</includes>
    <includes refid="FindMemberFieldMatcher_8h" local="yes">FindMemberFieldMatcher.h</includes>
    <incdepgraph>
      <node id="12">
        <label>FindMemberFieldMatcher.h</label>
        <link refid="FindMemberFieldMatcher_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>queue</label>
      </node>
      <node id="8">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="7">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="6">
        <label>json.hpp</label>
      </node>
      <node id="2">
        <label>FindTemplateTypes.h</label>
        <link refid="FindTemplateTypes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>clang/ASTMatchers/ASTMatchers.h</label>
      </node>
      <node id="1">
        <label>src/matchers/FindTemplateTypes.cpp</label>
        <link refid="FindTemplateTypes_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Tree.h</label>
        <link refid="Tree_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stack</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="15">
        <label>clang/ASTMatchers/ASTMatchersInternal.h</label>
      </node>
      <node id="16">
        <label>clang/ASTMatchers/ASTMatchersMacros.h</label>
      </node>
      <node id="13">
        <label>clang/ASTMatchers/ASTMatchFinder.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FindTemplateTypes_8h" kindref="compound">FindTemplateTypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FindMemberFieldMatcher_8h" kindref="compound">FindMemberFieldMatcher.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesc__ast__matchers" kindref="compound">sc_ast_matchers</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>TemplateType</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="normal"><ref refid="classsystemc__clang_1_1TemplateType_1a37fd7c2ea13b30a7788f4872102b978d" kindref="member">TemplateType::TemplateType</ref>()<sp/>:<sp/>type_name_{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},<sp/>type_ptr_{nullptr}<sp/>{}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">TemplateType::TemplateType(std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*t)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>type_name_{name},<sp/>type_ptr_{t}<sp/>{}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">TemplateType::TemplateType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref><sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1TemplateType_1a056a0a4453a2395e722e9ac87af483a6" kindref="member">type_name_</ref><sp/>=<sp/>from.<ref refid="classsystemc__clang_1_1TemplateType_1a056a0a4453a2395e722e9ac87af483a6" kindref="member">type_name_</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1TemplateType_1aed32832c653df6e1b894e21ee10dd613" kindref="member">type_ptr_</ref><sp/>=<sp/>from.<ref refid="classsystemc__clang_1_1TemplateType_1aed32832c653df6e1b894e21ee10dd613" kindref="member">type_ptr_</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="classsystemc__clang_1_1TemplateType_1a7005e59280437167bba6d864529bd63c" kindref="member">TemplateType::~TemplateType</ref>()<sp/>{<sp/><ref refid="classsystemc__clang_1_1TemplateType_1aed32832c653df6e1b894e21ee10dd613" kindref="member">type_ptr_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">std::string<sp/><ref refid="classsystemc__clang_1_1TemplateType_1a0b6b95ff48738820f98c16d85278ea72" kindref="member">TemplateType::getTypeName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1TemplateType_1a056a0a4453a2395e722e9ac87af483a6" kindref="member">type_name_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">std::string<sp/><ref refid="classsystemc__clang_1_1TemplateType_1a32bccb115bc0f74aaad1b0ac624a3f35" kindref="member">TemplateType::toString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1TemplateType_1a0b6b95ff48738820f98c16d85278ea72" kindref="member">getTypeName</ref>();<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*<ref refid="classsystemc__clang_1_1TemplateType_1a873bc0e213fb4bb72c467c8fd894013b" kindref="member">TemplateType::getTypePtr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1TemplateType_1aed32832c653df6e1b894e21ee10dd613" kindref="member">type_ptr_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>FindTemplateTypes</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1af1c0f61d80834c79db5b79256f157b98" kindref="member">FindTemplateTypes::shouldVisitTemplateInstantiations</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a0ea6171e3766471ee870a3a95ac4985b" kindref="member">FindTemplateTypes::FindTemplateTypes</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a0ea6171e3766471ee870a3a95ac4985b" kindref="member">FindTemplateTypes::FindTemplateTypes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref><sp/>=<sp/>rhs.<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a0ea6171e3766471ee870a3a95ac4985b" kindref="member">FindTemplateTypes::FindTemplateTypes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref><sp/>*rhs)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref><sp/>=<sp/>rhs-&gt;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a452d701c13c13cb79eaca7a9e7d46658" kindref="member">FindTemplateTypes::~FindTemplateTypes</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1ae648d1354e92813a492ccb2f7011d183" kindref="member">FindTemplateTypes::Enumerate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*type)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!type)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=Enumerate=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>TraverseType(QualType(type-&gt;getUnqualifiedDesugaredType(),<sp/>1));</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a465472dfc66a1f0bd77a706c5464434a" kindref="member">FindTemplateTypes::VisitDeclRefExpr</ref>(DeclRefExpr<sp/>*dre)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitDeclRefExpr=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>dre-&gt;dump();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FunctionDecl<sp/>*fd<sp/>=<sp/>dyn_cast&lt;FunctionDecl&gt;(dre-&gt;getDecl()))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>###<sp/>FUNCTION<sp/>DECL\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CXXRecordDecl<sp/>*fd<sp/>=<sp/>dyn_cast&lt;CXXRecordDecl&gt;(dre-&gt;getDecl()))<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>###<sp/>CXX<sp/>DECL\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;type<sp/>name:<sp/>&quot;<sp/>&lt;&lt;<sp/>dre-&gt;getType().getAsString()<sp/>&lt;&lt;<sp/>&quot;===<sp/>\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::string<sp/>template_parm{dre-&gt;getNameInfo().getAsString()};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_node{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref>{template_parm,<sp/>dre-&gt;getType().getTypePtr()})};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addEdge(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>,<sp/>new_node);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a08be908975a5331dee884534b3678b31" kindref="member">FindTemplateTypes::VisitTemplateSpecializationType</ref>(</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>TemplateSpecializationType<sp/>*special_type)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitTemplateSpecializationType=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(special_type-&gt;isSugared())<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ut{special_type-&gt;desugar().getTypePtr()};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseType(special_type-&gt;desugar());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>template_name{special_type-&gt;getTemplateName()};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>clang::LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>clang::PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>Policy.SuppressTagKeyword<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::string<sp/>name_string;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>llvm::raw_string_ostream<sp/>sstream(name_string);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>template_name.print(sstream,<sp/>Policy,<sp/>0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>llvm::outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;==<sp/>template_name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sstream.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_node{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(<ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref>{sstream.str(),<sp/>special_type})};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref><sp/>=<sp/>new_node;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.setRoot(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addEdge(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.top(),<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.push(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a98c42e1f3a2f47d0dbbbaf8c07387e41" kindref="member">FindTemplateTypes::VisitCXXRecordDecl</ref>(CXXRecordDecl<sp/>*cxx_record)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitCXXRecordDecl=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cxx_record<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>IdentifierInfo<sp/>*info{cxx_record-&gt;getIdentifier()};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>==&gt;<sp/>CXXRecord<sp/>type:<sp/>&quot;<sp/>&lt;&lt;<sp/>info-&gt;getNameStart()<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template_types_.push_back(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TemplateType(info-&gt;getNameStart(),<sp/>cxx_record-&gt;getTypeForDecl()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1afca890e8c672508a2873159ecac2fa73" kindref="member">FindTemplateTypes::VisitBuiltinType</ref>(BuiltinType<sp/>*bi_type)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitBuiltinType=<sp/>\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bi_type-&gt;dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>clang::LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>clang::PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>type_name{bi_type-&gt;getNameAsCString(Policy)};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_name{bi_type-&gt;getName(Policy)};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>llvm::outs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>is<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref><sp/>tt{type_name.str(),<sp/>bi_type};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref><sp/>=<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(tt);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template_types_.push_back(TemplateType(type_name,<sp/>bi_type));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.setRoot(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a0867ed3e94d6c427fcc1081f2e44ae91" kindref="member">FindTemplateTypes::VisitTypedefType</ref>(TypedefType<sp/>*typedef_type)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitTypedefType=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedef_type-&gt;dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>child<sp/>nodes<sp/>of<sp/>TemplateSpecializationType<sp/>are<sp/>not<sp/>being<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>special_type<sp/>=<sp/>typedef_type-&gt;getAs&lt;TemplateSpecializationType&gt;())<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseType(QualType(special_type-&gt;getUnqualifiedDesugaredType(),<sp/>0));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aee9dfae133aba48b43d3db618431bdb9" kindref="member">FindTemplateTypes::VisitRecordType</ref>(RecordType<sp/>*rt)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=VisitRecordType=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_decl{rt-&gt;getDecl()};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_name{type_decl-&gt;getName().str()};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>==&gt;<sp/>name<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>type_name<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref><sp/>=<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(<ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref>(type_name,<sp/>rt));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.setRoot(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addEdge(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.top(),<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.push(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template_args_.dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctsd<sp/>=<sp/>dyn_cast&lt;ClassTemplateSpecializationDecl&gt;(type_decl))<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>==&gt;<sp/>CTSD<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>ctsd-&gt;getTemplateArgs().size()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TemplateArgumentList<sp/>&amp;arg_list{ctsd-&gt;getTemplateArgs()};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{0};<sp/>i<sp/>&lt;<sp/>arg_list.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TemplateArgument<sp/>&amp;targ{arg_list[i]};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>====&gt;<sp/>template<sp/>argument:<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targ.dump();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Write<sp/>this<sp/>into<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>====&gt;<sp/>template<sp/>type<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>targ.getKind()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(targ.getKind()<sp/>==<sp/>TemplateArgument::ArgKind::Type)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QualType<sp/>template_name{targ.getAsType()};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*arg_type{targ.getAsType().getTypePtr()};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg_type-&gt;isBuiltinType())<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.push(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseType(QualType(</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_list[i].getAsType()-&gt;getUnqualifiedDesugaredType(),<sp/>1));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref><sp/>=<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.top();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.pop();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_node{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref>{template_name.getAsString(),<sp/>arg_type})};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addEdge(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>,<sp/>new_node);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(targ.getKind()<sp/>==<sp/>TemplateArgument::ArgKind::Integral)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QualType<sp/>template_name{targ.getNonTypeTemplateArgumentType()};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template_name.dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>when<sp/>there<sp/>are<sp/>implicit<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sc_core::sc_writer_policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;<sp/>====&gt;<sp/>Integral<sp/>:<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(template_name.getAsString()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;enum<sp/>sc_core::sc_writer_policy&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>integral{targ.getAsIntegral()};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SmallString&lt;16&gt;<sp/>integral_string{};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral.toString(integral_string);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>integral_string<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_node{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addNode(<ref refid="classsystemc__clang_1_1TemplateType" kindref="compound">TemplateType</ref>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral_string.c_str(),<sp/>template_name.<ref refid="classsystemc__clang_1_1TemplateType_1a873bc0e213fb4bb72c467c8fd894013b" kindref="member">getTypePtr</ref>()})};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.addEdge(<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref>,<sp/>new_node);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;&gt;<sp/>stack<sp/>size:<sp/>&quot;<sp/>&lt;&lt;<sp/>stack_current_node_.size()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a1a5a05a299d882cce7e2f99d17f85f1a" kindref="member">current_type_node_</ref><sp/>=<sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.top();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3e3a6f5f7cfb2ad47fb77a4253794d1b" kindref="member">stack_current_node_</ref>.pop();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;=END<sp/>VisitRecordType=\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a27ab4b5ddc1ac71168caf9319621a819" kindref="member">FindTemplateTypes::VisitIntegerLiteral</ref>(IntegerLiteral<sp/>*l)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;\n=VisitIntegerLiteral:<sp/>\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>l-&gt;getValue().toString(10,true)<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&quot;\n&quot;;<sp/>_os<sp/>&lt;&lt;<sp/>&quot;==<sp/>type<sp/>ptr:<sp/>&quot;<sp/>&lt;&lt;<sp/>l-&gt;getType().getTypePtr()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;<sp/>_os<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&quot;==<sp/>type<sp/>name:<sp/>&quot;<sp/>&lt;&lt;<sp/>l-&gt;getType().getAsString()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><ref refid="classsystemc__clang_1_1Tree" kindref="compound">Tree&lt;TemplateType&gt;</ref><sp/>*<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a6379b187759bbf16c8e378d2716cf3e9" kindref="member">FindTemplateTypes::getTemplateArgTreePtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="namespacesystemc__clang_1ab232545035b571c3f3cd13a4459f2d9e" kindref="member">json</ref><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1af899986dd7eb6be75e8a749a4508f77e" kindref="member">FindTemplateTypes::dump_json</ref>()<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="namespacesystemc__clang_1ab232545035b571c3f3cd13a4459f2d9e" kindref="member">json</ref><sp/>tree_j;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a6379b187759bbf16c8e378d2716cf3e9" kindref="member">getTemplateArgTreePtr</ref>()};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;node<sp/>:<sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>TreeNodePtr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_data{node-&gt;getDataPtr()};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent_node{node-&gt;getParent()};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent_data{parent_node-&gt;getDataPtr()};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_node-&gt;getDataPtr()<sp/>==<sp/>node-&gt;getDataPtr())<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>llvm::outs()<sp/>&lt;&lt;<sp/>&quot;\nInsert<sp/>parent<sp/>node:<sp/>&quot;<sp/>&lt;&lt;<sp/>type_data-&gt;getTypeName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tree_j[type_data-&gt;getTypeName()]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>This<sp/>does<sp/>not<sp/>print<sp/>the<sp/>tree<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>be<sp/>a<sp/>simple<sp/>way<sp/>to<sp/>access<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>location<sp/>for<sp/>the<sp/>insertion<sp/>of<sp/>the<sp/>new<sp/>values<sp/>in<sp/>this<sp/>JSON.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Perhaps<sp/>the<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>to<sp/>construct<sp/>a<sp/>string<sp/>that<sp/>JSON<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tree_j[parent_data-&gt;getTypeName()].push_back(type_data-&gt;getTypeName());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>llvm::outs()<sp/>&lt;&lt;<sp/>tree_j.dump(4);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tree_j;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes_1a3a30cd15d94fae87ef51731f9b720b91" kindref="member">FindTemplateTypes::printTemplateArguments</ref>(llvm::raw_ostream<sp/>&amp;os)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root_node{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.getRoot()};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s{<ref refid="classsystemc__clang_1_1FindTemplateTypes_1aaebfc9684fe0c1679fe39ad8689c06f0" kindref="member">template_args_</ref>.dft(root_node)};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>Template<sp/>args<sp/>(DFT):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/matchers/FindTemplateTypes.cpp"/>
  </compounddef>
</doxygen>
