<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacehnode" kind="namespace" language="C++">
    <compoundname>hnode</compoundname>
    <innerclass refid="classhnode_1_1hNode" prot="public">hnode::hNode</innerclass>
    <innerclass refid="classhnode_1_1util" prot="public">hnode::util</innerclass>
    <innerclass refid="structhnode_1_1names__t" prot="public">hnode::names_t</innerclass>
    <innerclass refid="classhnode_1_1name__serve" prot="public">hnode::name_serve</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacehnode_1ae5db0847c00e6e0627bc73df624628d0" prot="public" static="no">
        <type><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref> *</type>
        <definition>typedef hNode* hnode::hNodep</definition>
        <argsstring></argsstring>
        <name>hNodep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="plugins/hdl/hNode.h" line="22" column="18" bodyfile="plugins/hdl/hNode.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacehnode_1a3f10aaef8411f7c053be70eac6c4b52a" prot="public" static="no">
        <type>std::map&lt; Decl *, <ref refid="structhnode_1_1names__t" kindref="compound">names_t</ref> &gt;</type>
        <definition>typedef std::map&lt;Decl *, names_t&gt; hnode::hdecl_name_map_t</definition>
        <argsstring></argsstring>
        <name>hdecl_name_map_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="plugins/hdl/hNode.h" line="271" column="19" bodyfile="plugins/hdl/hNode.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacehnode_1a895d5dd4b2ad8625d95e059f85f9bef7" prot="public" static="no">
        <type>std::map&lt; <ref refid="classsystemc__clang_1_1ModuleInstance" kindref="compound">ModuleInstance</ref> *, <ref refid="structhnode_1_1names__t" kindref="compound">names_t</ref> &gt;</type>
        <definition>typedef std::map&lt;ModuleInstance *, names_t&gt; hnode::hmodinst_name_map_t</definition>
        <argsstring></argsstring>
        <name>hmodinst_name_map_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="plugins/hdl/hNode.h" line="272" column="19" bodyfile="plugins/hdl/hNode.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref> class defines the language-neutral HDL opcodes describing systemc constructs and more generally statements and expression that may occur in an SC_MODULE or SC_METHOD. Accessor and print methods are provided. </para>
    </detaileddescription>
    <location file="plugins/hdl/hNode.h" line="18" column="1"/>
  </compounddef>
</doxygen>
