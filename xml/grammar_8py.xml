<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="grammar_8py" kind="file" language="Python">
    <compoundname>grammar.py</compoundname>
    <innerclass refid="classparselib_1_1grammar_1_1UnexpectedHCodeStructureError" prot="public">parselib::grammar::UnexpectedHCodeStructureError</innerclass>
    <innernamespace refid="namespaceparselib_1_1grammar">parselib::grammar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceparselib_1_1grammar" refkind="compound"><highlight class="keyword">from</highlight><highlight class="normal"><sp/>lark<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Lark</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">lark_grammar<sp/>=<sp/>Lark(</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start:<sp/>modulelist<sp/>typelist</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modulelist:<sp/>(hmodule)*</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typelist:<sp/>(htypedef)*</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>hmodule:<sp/><sp/>&quot;hModule&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>modportsiglist?<sp/>(portbindinglist|processlist)*<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmodule:<sp/><sp/>&quot;hModule&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>modportsiglist?<sp/>(hmodinitblock|processlist)*<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modportsiglist:<sp/>&quot;hPortsigvarlist&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>modportsigdecl+<sp/>&quot;]&quot;<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?modportsigdecl:<sp/>portdecltype<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>sigdecltype<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>vardeclinit<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>moddecl</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moddecl:<sp/>&quot;hModdecl&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portdecltype:<sp/>portdecl<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigdecltype:<sp/>sigdecl<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigdecl:<sp/><sp/>&quot;hSigdecl&quot;<sp/>ID<sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?portdecl:<sp/>inportdecl<sp/>|<sp/>outportdecl</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inportdecl:<sp/><sp/>&quot;hPortin&quot;<sp/>ID<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outportdecl:<sp/>&quot;hPortout&quot;<sp/>ID</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vardeclinit:<sp/>&quot;hVardecl&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>(hvarinit<sp/>|<sp/>hvarinitint)?<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hvarinit:<sp/>&quot;hVarInit&quot;<sp/>&quot;NONAME&quot;<sp/>expression</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hvarinitint:<sp/>&quot;hVarInit&quot;<sp/>NUM<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>can<sp/>be<sp/>no<sp/>process<sp/>at<sp/>all<sp/>in<sp/>the<sp/>module</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processlist:<sp/><sp/>&quot;hProcesses&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>(hprocess|hfunction)*&quot;]&quot;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>could<sp/>be<sp/>nothing</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>temporarily<sp/>ignore<sp/>the<sp/>hMethod<sp/>node</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hprocess:<sp/><sp/>&quot;hProcess&quot;<sp/>ID<sp/><sp/>&quot;[&quot;<sp/>&quot;hMethod&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>prevardecl<sp/><sp/>hcstmt<sp/>&quot;]&quot;<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevardecl:<sp/>vardecl*</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vardecl:<sp/>vardeclinit</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>can<sp/>be<sp/>just<sp/>an<sp/>empty<sp/>statement</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hcstmt:<sp/><sp/>&quot;hCStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>modportsiglist*<sp/>stmts<sp/>&quot;]&quot;<sp/>//<sp/>useful<sp/>for<sp/>raising<sp/>variable<sp/>decls</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>&quot;hCStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stmts:<sp/>stmt+</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stmt<sp/>:<sp/>expression_in_stmt</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>syscwrite</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>ifstmt</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>forstmt</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hcstmt</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>whilestmt</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>switchstmt</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>blkassign</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hnoop</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hreturnstmt</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?htobool:<sp/>&quot;hNoop&quot;<sp/>&quot;to_bool&quot;<sp/>&quot;[&quot;<sp/>harrayref<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htouint:<sp/>&quot;hNoop&quot;<sp/>&quot;to_uint&quot;<sp/>&quot;[&quot;<sp/>syscread<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htoint:<sp/>&quot;hNoop&quot;<sp/>&quot;to_int&quot;<sp/>&quot;[&quot;<sp/>syscread<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnoop:<sp/>&quot;hNoop&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>hmodinitblock:<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>first<sp/>component<sp/>is<sp/>the<sp/>id<sp/>of<sp/>the<sp/>module<sp/>(in<sp/>parent?)</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>second<sp/>component<sp/>is<sp/>initialization<sp/>list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>third<sp/>component<sp/>is<sp/>port<sp/>binding<sp/>list</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmodinitblock:<sp/>&quot;hModinitblock&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hcstmt<sp/>portbindinglist*<sp/>hsenslist*&quot;]&quot;</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Port<sp/>Bindings</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portbindinglist:<sp/>&quot;hPortbindings&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>portbinding*<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>hPortbinding<sp/>u_dut<sp/>[</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>hVarref<sp/>avg_out<sp/>NOLIST</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>hVarref<sp/>dut_avg<sp/>NOLIST</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>]</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portbinding:<sp/>&quot;hPortbinding&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hvarref<sp/>hvarref<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hPortbinding&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hbindingref<sp/>hbindingref<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hPortbinding&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hvarref<sp/>hbindingref<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hPortbinding&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hbindingarrayref<sp/>hbindingarrayref<sp/>&quot;]&quot;<sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hPortbinding&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hvarref<sp/>hbindingarrayref<sp/>&quot;]&quot;<sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>replace<sp/>portbinding<sp/>with<sp/>succinct<sp/>syntax</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hbindingref:<sp/>&quot;hVarref&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hliteral<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compared<sp/>array<sp/>ref<sp/>in<sp/>normal<sp/>expressions</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>use<sp/>a<sp/>more<sp/>restrictive<sp/>form<sp/>here</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hbindingarrayref:<sp/>&quot;hBinop&quot;<sp/>&quot;ARRAYSUBSCRIPT&quot;<sp/>&quot;[&quot;<sp/>(hvarref|hbindingarrayref)<sp/>(hliteral|hbinop)<sp/>&quot;]&quot;<sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>is<sp/>solely<sp/>for<sp/>maintaining<sp/>the<sp/>semicolon</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression_in_stmt:<sp/>expression</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>while(condition)<sp/>stmts</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whilestmt:<sp/>&quot;hWhileStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>expression<sp/>stmt<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>for(forinit;<sp/>forcond;<sp/>forpostcond)<sp/>stmts</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forstmt:<sp/>&quot;hForStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>forinit<sp/>forcond<sp/>forpostcond<sp/>forbody<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forinit:<sp/>&quot;hPortsigvarlist&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>vardeclinit<sp/><sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>vardeclinit</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hnoop</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>blkassign</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forcond:<sp/>expression</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forpostcond:<sp/>expression</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forbody:<sp/>stmt</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchstmt:<sp/>&quot;hSwitchStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>switchcond<sp/>switchbody<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchcond:<sp/>expression</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>we<sp/>don&apos;t<sp/>make<sp/>this<sp/>a<sp/>noraml<sp/>statement<sp/>as<sp/>in<sp/>the<sp/>context<sp/>of<sp/>switch,<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>don&apos;t<sp/>use<sp/>general<sp/>statements</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchbody:<sp/>&quot;hCStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>casestmt+<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>casestmt:<sp/>&quot;hSwitchCase&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>casevalue<sp/>stmt<sp/>&quot;]&quot;<sp/>hnoop</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hSwitchCase&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>casevalue<sp/>hnoop<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hSwitchCase&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>casevalue<sp/>stmt<sp/>&quot;]&quot;<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>casevalue:<sp/>expression</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Function</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hfunction<sp/>:<sp/>&quot;hFunction&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hfunctionrettype<sp/>hfunctionparams<sp/>hfunctionlocalvars<sp/>hfunctionbody<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hfunctionlocalvars:<sp/>vardeclinit*</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hfunctionbody:<sp/>hcstmt</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hfunctionrettype:<sp/>&quot;hFunctionRetType&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hfunctionparams<sp/>:<sp/>&quot;hFunctionParams&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>vardeclinit*<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hFunctionParams&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hreturnstmt:<sp/>&quot;hReturnStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hReturnStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;NOLIST&quot;<sp/><sp/>//<sp/>return;</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hsenslist<sp/>:<sp/>&quot;hSenslist&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>hsensvar*<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hSenslist&quot;<sp/>ID<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hsensvar<sp/>:<sp/><sp/>&quot;hSensvar&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>(expression|hvalchange)<sp/>&quot;hNoop&quot;<sp/>npa<sp/>&quot;NOLIST&quot;<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hvalchange:<sp/>&quot;hNoop&quot;<sp/>&quot;value_changed_event&quot;<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hsensedge<sp/>:<sp/>&quot;hNoop&quot;<sp/>npa<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!npa<sp/>:<sp/>&quot;neg&quot;<sp/>|<sp/>&quot;pos&quot;<sp/>|<sp/>&quot;always&quot;</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>and<sp/>if-else,<sp/>not<sp/>handling<sp/>if-elseif<sp/>case</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifstmt:<sp/>&quot;hIfStmt&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>expression<sp/><sp/>stmt<sp/>stmt?&quot;]&quot;</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?expression:<sp/>hbinop</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hunop</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hliteral</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>vardeclinit</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hvarref</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hunimp</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>syscread</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hmethodcall</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>htobool</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>htouint</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>htoint</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hcondop</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hcondop<sp/>:<sp/>&quot;hCondop&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>(hbinop<sp/>|<sp/>hunop)<sp/>expression<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syscread<sp/>:<sp/>hsigassignr<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>syscwrite<sp/>:<sp/>hsigassignl<sp/>&quot;[&quot;<sp/><sp/>expression<sp/><sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hsigassignr<sp/>:<sp/><sp/>&quot;hSigAssignR&quot;<sp/>&quot;read&quot;<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hsigassignl<sp/>:<sp/><sp/>&quot;hSigAssignL&quot;<sp/>&quot;write&quot;<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>function<sp/>call</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hvarref<sp/>:<sp/>&quot;hVarref&quot;<sp/>ID<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunimp:<sp/><sp/>&quot;hUnimpl&quot;<sp/>ID<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hbinop:<sp/><sp/>&quot;hBinop&quot;<sp/>BINOP<sp/>&quot;[&quot;<sp/>expression<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>A<sp/>temporary<sp/>hack<sp/>to<sp/>handle<sp/>--</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunop:<sp/><sp/>&quot;hUnop&quot;<sp/>UNOP_NON_SUB<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>&quot;hUnop&quot;<sp/>UNOP_SUB<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>&quot;hBinop&quot;<sp/>UNOP_BNOT<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>&quot;hBinop&quot;<sp/>UNOP_NOT<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>hunopdec</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hunopdec:<sp/>&quot;hUnop&quot;<sp/>&quot;-&quot;<sp/>&quot;-&quot;<sp/>&quot;[&quot;<sp/>expression<sp/>&quot;]&quot;<sp/>//<sp/>hack<sp/>to<sp/>work<sp/>with<sp/>--</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Separate<sp/>&apos;=&apos;<sp/>out<sp/>from<sp/>so<sp/>that<sp/>it<sp/>is<sp/>not<sp/>an<sp/>expression<sp/>but<sp/>a<sp/>standalone<sp/>statement</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkassign:<sp/>&quot;hBinop&quot;<sp/>&quot;=&quot;<sp/>&quot;[&quot;<sp/>(hvarref<sp/>|<sp/>hliteral)<sp/>(htobool<sp/>|<sp/>hunop<sp/>|<sp/>hvarref<sp/>|<sp/>hliteral<sp/>|<sp/>harrayref<sp/>|<sp/>hnsbinop<sp/>|<sp/>hunimp<sp/>|<sp/>syscread<sp/>|<sp/>hmethodcall)<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hBinop&quot;<sp/>&quot;=&quot;<sp/>&quot;[&quot;<sp/>harrayref<sp/>(htobool<sp/>|<sp/>hvarref<sp/>|<sp/>hliteral<sp/>|<sp/>harrayref<sp/>|<sp/>hnsbinop<sp/>|<sp/>hunimp<sp/>|<sp/>syscread<sp/>|<sp/>hmethodcall)<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hSigAssignL&quot;<sp/>&quot;write&quot;<sp/>&quot;[&quot;<sp/>(hliteral<sp/>|<sp/>hvarref<sp/>|<sp/>harrayref)<sp/>(syscread<sp/>|<sp/>hliteral<sp/>|<sp/>harrayref<sp/>|<sp/>hunop<sp/>|<sp/>hvarref<sp/>|<sp/>htobool)<sp/><sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hSigAssignL&quot;<sp/>&quot;write&quot;<sp/>&quot;[&quot;<sp/>(hliteral<sp/>|<sp/>hvarref<sp/>|<sp/>harrayref)<sp/>nonrefexp<sp/><sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>vassign</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hmodassign</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Temporary<sp/>hack<sp/>to<sp/>handle<sp/>-=<sp/>/<sp/>+=</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmodassign<sp/>:<sp/>&quot;hBinop&quot;<sp/>hmodassigntype<sp/>&quot;[&quot;<sp/>hvarref<sp/>hliteral<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hmodassigntype<sp/>:<sp/>haddassign<sp/>|<sp/>hsubassign</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haddassign<sp/>:<sp/>&quot;+&quot;<sp/>&quot;=&quot;<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hsubassign<sp/>:<sp/>&quot;-&quot;<sp/>&quot;=&quot;</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vassign:<sp/>&quot;hVarAssign&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>hvarref<sp/>(hnsbinop<sp/>|<sp/>syscread<sp/>|<sp/>hliteral<sp/>|<sp/>hvarref<sp/>|<sp/>expression)&quot;]&quot;</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Normal<sp/>expressions<sp/>that<sp/>can<sp/>not<sp/>be<sp/>expanded</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonrefexp:<sp/>hbinop</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harrayref:<sp/>&quot;hBinop&quot;<sp/>&quot;ARRAYSUBSCRIPT&quot;<sp/><sp/>&quot;[&quot;<sp/>(hliteral<sp/>|<sp/>hvarref<sp/>|<sp/>syscread)<sp/>expression<sp/><sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>hslice</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hslice:<sp/>&quot;hBinop&quot;<sp/>&quot;SLICE&quot;<sp/>&quot;[&quot;<sp/>hvarref<sp/>expression<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnsbinop:<sp/><sp/>&quot;hBinop&quot;<sp/>NONSUBBINOP<sp/>&quot;[&quot;<sp/>expression<sp/>expression<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmethodcall:<sp/>&quot;hMethodCall&quot;<sp/>hidorstr<sp/><sp/>&quot;[&quot;<sp/>expression<sp/>expression*<sp/>&quot;]&quot;<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?hidorstr:<sp/>ID<sp/>|<sp/>STRING</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hliteral:<sp/><sp/>idlit<sp/>|<sp/>numlit<sp/>|<sp/>numlitwidth</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idlit<sp/>:<sp/>&quot;hLiteral&quot;<sp/>ID<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numlit<sp/>:<sp/>&quot;hLiteral&quot;<sp/>NUM<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numlitwidth<sp/>:<sp/>&quot;hLiteral&quot;<sp/>NUM<sp/>&quot;[&quot;<sp/>htypeinfo<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypeinfo:<sp/>&quot;hTypeinfo&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;[&quot;<sp/>htype<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hTypeinfo&quot;<sp/>&quot;NONAME&quot;<sp/>&quot;NOLIST&quot;<sp/>//<sp/>?</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htype:<sp/>htypearray</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hType&quot;<sp/>TYPESTR<sp/>&quot;NOLIST&quot;<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;hType&quot;<sp/>TYPESTR<sp/>&quot;[&quot;<sp/>(htype|htypeint)+<sp/>&quot;]&quot;<sp/><sp/><sp/><sp/><sp/>//<sp/>nested<sp/>types,<sp/>type<sp/>parameters</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypearray<sp/>:<sp/>&quot;hType&quot;<sp/>&quot;array&quot;<sp/>arraydimlength<sp/>&quot;[&quot;<sp/>(htype|htypeint)+<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arraydimlength:<sp/>&quot;##&quot;<sp/>NUM<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;##&quot;<sp/>NUM<sp/>arraydimlength</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypeint:<sp/>&quot;hLiteral&quot;<sp/>NUM<sp/>&quot;NOLIST&quot;<sp/><sp/>//<sp/>integer<sp/>type<sp/>parameters</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypedef:<sp/>&quot;hTypedef&quot;<sp/>TYPESTR<sp/>&quot;[&quot;<sp/>htypetemplateparams<sp/>htypefields<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypetemplateparams:<sp/>htypetemplateparam*</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypetemplateparam:<sp/>&quot;hTypeTemplateParam&quot;<sp/>TYPESTR<sp/>&quot;NOLIST&quot;</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypefields:<sp/>htypefield*</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htypefield:<sp/>&quot;hTypeField&quot;<sp/>ID<sp/>&quot;[&quot;<sp/>htype<sp/>&quot;]&quot;</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID:<sp/>/[a-zA-Z_][a-zA-Z_0-9#]*/</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NUM:<sp/>/(\+|\-)?[0-9]+/</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TYPESTR:<sp/>/[a-zA-Z_][a-zA-Z_0-9]*/</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BINOP:<sp/>NONSUBBINOP<sp/>|<sp/>&quot;ARRAYSUBSCRIPT&quot;<sp/>|<sp/>&quot;SLICE&quot;</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NONSUBBINOP:<sp/>&quot;==&quot;<sp/>|<sp/>&quot;&lt;&lt;&quot;<sp/>|<sp/>&quot;&gt;&gt;&quot;<sp/>|<sp/>&quot;&amp;&amp;&quot;<sp/>|<sp/>&quot;||&quot;<sp/>|<sp/>&quot;|&quot;<sp/>|<sp/>&quot;&gt;=&quot;<sp/>|<sp/>&quot;&gt;&quot;<sp/>|<sp/>ARITHOP<sp/>|<sp/>&quot;&lt;=&quot;<sp/>|<sp/>&quot;&lt;&quot;<sp/>|<sp/>&quot;%&quot;<sp/>|<sp/>&quot;!=&quot;<sp/>|<sp/>&quot;&amp;&quot;<sp/>|<sp/>&quot;,&quot;</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARITHOP:<sp/>&quot;+&quot;<sp/>|<sp/>&quot;-&quot;<sp/>|<sp/>&quot;*&quot;<sp/>|<sp/>&quot;/&quot;<sp/>|<sp/>&quot;^&quot;</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_NON_SUB:<sp/>&quot;!&quot;<sp/>|<sp/>&quot;++&quot;<sp/>|<sp/>&quot;-&quot;</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_SUB:<sp/><sp/>&quot;-&quot;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_DEC:<sp/><sp/>&quot;--&quot;</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>These<sp/>are<sp/>temporary<sp/>nodes<sp/>that<sp/>should<sp/>be<sp/>removed<sp/>when<sp/>hBinop<sp/>is<sp/>fixed</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_BOR:<sp/>&quot;|&quot;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_NOT:<sp/>&quot;!&quot;</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNOP_BNOT:<sp/>&quot;~&quot;</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%import<sp/>common.WS</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%ignore<sp/>WS</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%import<sp/>common.ESCAPED_STRING<sp/>-&gt;<sp/>STRING</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal">,<sp/>parser=</highlight><highlight class="stringliteral">&apos;lalr&apos;</highlight><highlight class="normal">,<sp/>debug=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>propagate_positions=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classparselib_1_1grammar_1_1UnexpectedHCodeStructureError" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparselib_1_1grammar_1_1UnexpectedHCodeStructureError" kindref="compound">UnexpectedHCodeStructureError</ref>(Exception):</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;raised<sp/>when<sp/>a<sp/>hcode<sp/>node<sp/>is<sp/>not<sp/>as<sp/>expected&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="plugins/hdl/parselib/grammar.py"/>
  </compounddef>
</doxygen>
