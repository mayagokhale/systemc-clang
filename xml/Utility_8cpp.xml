<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Utility_8cpp" kind="file" language="C++">
    <compoundname>Utility.cpp</compoundname>
    <includes refid="Utility_8h" local="yes">Utility.h</includes>
    <incdepgraph>
      <node id="5">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="6">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="4">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="2">
        <label>Utility.h</label>
        <link refid="Utility_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>clang/AST/DeclCXX.h</label>
      </node>
      <node id="1">
        <label>src/SCuitable/Utility.cpp</label>
        <link refid="Utility_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Utility_8h" kindref="compound">Utility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">void<sp/>Utility::tabit(raw_ostream<sp/>&amp;os,<sp/>int<sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tabn;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="comment">}</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">string<sp/>Utility::strip(string<sp/>s,<sp/>string<sp/>sub)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>//<sp/>sub<sp/>has<sp/>&quot;struct<sp/>&quot;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>size_t<sp/>pos<sp/>=<sp/>s.find(sub);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>if<sp/>(pos<sp/>==<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>s;</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>return<sp/>s.erase(pos,<sp/>sub.length());</highlight></codeline>
<codeline lineno="20"><highlight class="comment">}</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">template<sp/>&lt;typename<sp/>vec&gt;<sp/>vec<sp/>Utility::removeDuplicate(vec<sp/>vecInput)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vecInput.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vecInput.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>!=<sp/>j<sp/>&amp;&amp;<sp/>vecInput.at(i)<sp/>==<sp/>vecInput.at(j))<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecInput.erase(vecInput.begin()<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>return<sp/>vecInput;</highlight></codeline>
<codeline lineno="31"><highlight class="comment">}</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">template<sp/>&lt;typename<sp/>vec,<sp/>typename<sp/>element&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="comment">bool<sp/>Utility::isElementPresent(vec<sp/>vecInput,<sp/>element<sp/>elemInput)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vecInput.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(elemInput<sp/>==<sp/>vecInput.at(i))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="41"><highlight class="comment">}</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">template<sp/>&lt;typename<sp/>expressionArg&gt;<sp/>string<sp/>getArgumentName(expressionArg<sp/>*exp)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>if<sp/>(exp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>string(&quot;NULL&quot;);</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>clang::LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>clang::PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>string<sp/>TypeS;</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>llvm::raw_string_ostream<sp/>s(TypeS);</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>exp-&gt;printPretty(s,<sp/>0,<sp/>Policy);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>s.str();</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="comment">}</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">Utility::Utility()<sp/>{}</highlight></codeline>
<codeline lineno="62"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/SCuitable/Utility.cpp"/>
  </compounddef>
</doxygen>
