<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classsc__ast__matchers_1_1PortMatcher" kind="class" language="C++" prot="public">
    <compoundname>sc_ast_matchers::PortMatcher</compoundname>
    <basecompoundref prot="public" virt="non-virtual">MatchFinder::MatchCallback</basecompoundref>
    <includes refid="PortMatcher_8h" local="no">PortMatcher.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" prot="public" static="no">
        <type>std::vector&lt; std::tuple&lt; std::string, <ref refid="classsystemc__clang_1_1PortDecl" kindref="compound">PortDecl</ref> * &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::tuple&lt;std::string, PortDecl *&gt; &gt; sc_ast_matchers::PortMatcher::MemberDeclType</definition>
        <argsstring></argsstring>
        <name>MemberDeclType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A vector of tuples that holds the name of the port, and a pointer to PortDecl. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="47" column="23" bodyfile="src/matchers/PortMatcher.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a6c9455bf67e1f10d2f466b787fe86eed" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::clock_ports_</definition>
        <argsstring></argsstring>
        <name>clock_ports_</name>
        <briefdescription>
<para>Separate out the member declarations found within a SystemC module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="54" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a6cd9c1fbdce7a63e2290869a3a2d91bd" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::in_ports_</definition>
        <argsstring></argsstring>
        <name>in_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="55" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a6c758be3a03eda8017b63e7b1d26005f" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::out_ports_</definition>
        <argsstring></argsstring>
        <name>out_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="56" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1ac8656e52700fdf69ef385e6053f413a6" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::inout_ports_</definition>
        <argsstring></argsstring>
        <name>inout_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="57" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1aad7fa3383018549914978aa2ae70cbe0" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::other_fields_</definition>
        <argsstring></argsstring>
        <name>other_fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="58" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1abf60489f8beb59c611631acf505ec127" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::signal_fields_</definition>
        <argsstring></argsstring>
        <name>signal_fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="59" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a9ed1d0cc8e4537b8862a0422640e9550" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::instream_ports_</definition>
        <argsstring></argsstring>
        <name>instream_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="60" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a1871cef913dd1e3f60e698b9b70e429e" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::outstream_ports_</definition>
        <argsstring></argsstring>
        <name>outstream_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="61" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1aee2cffb6787abffd58c2fb924e41c0bb" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::sc_ports_</definition>
        <argsstring></argsstring>
        <name>sc_ports_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="62" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsc__ast__matchers_1_1PortMatcher_1a3bf521271c460c87b76f2e4dcce26463" prot="public" static="no" mutable="no">
        <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref></type>
        <definition>MemberDeclType sc_ast_matchers::PortMatcher::submodules_</definition>
        <argsstring></argsstring>
        <name>submodules_</name>
        <briefdescription>
<para>Store the declaration of submodules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="65" column="18" bodyfile="src/matchers/PortMatcher.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a999daf8b4930ebb7910de642011227db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getClockPorts</definition>
        <argsstring>() const</argsstring>
        <name>getClockPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified clock ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="71" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a931f9cd871638761ba1442053aca90a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getInputPorts</definition>
        <argsstring>() const</argsstring>
        <name>getInputPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified input ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="75" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ab6015537c8e1640a738da4e406923fe2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getOutputPorts</definition>
        <argsstring>() const</argsstring>
        <name>getOutputPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified output ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="79" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a1ad8937d9f60d552594f8f3fdedb0e18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getInOutPorts</definition>
        <argsstring>() const</argsstring>
        <name>getInOutPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified inout ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="83" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a65778692eb11492e527165156e90ea18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getOtherVars</definition>
        <argsstring>() const</argsstring>
        <name>getOtherVars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified variables that are not ports or signals. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="87" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ae61a181de0ab202424e9735dab85a456" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getSignals</definition>
        <argsstring>() const</argsstring>
        <name>getSignals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified signals. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="91" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1acbae38d79009ad6c41e31eb4deb935a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getSubmodules</definition>
        <argsstring>() const</argsstring>
        <name>getSubmodules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified submodules. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="95" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a2ab5f114faa28b64cd7082c4964fe2f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getInputStreamPorts</definition>
        <argsstring>() const</argsstring>
        <name>getInputStreamPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified sc_stream input ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="99" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a77709066aca9433c605accb3dfcde857" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getOutputStreamPorts</definition>
        <argsstring>() const</argsstring>
        <name>getOutputStreamPorts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the identified sc_stream output ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="103" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a0a3bb14d0f664ad16baad96c92e3b54d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
        <definition>const MemberDeclType&amp; sc_ast_matchers::PortMatcher::getPorts</definition>
        <argsstring>() const</argsstring>
        <name>getPorts</name>
        <briefdescription>
<para>Returns the identified ports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="108" column="24" bodyfile="src/matchers/PortMatcher.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a1bd74e34abdc8377be310d1f1580fc05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sc_ast_matchers::PortMatcher::PortMatcher</definition>
        <argsstring>()</argsstring>
        <name>PortMatcher</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="111" column="3" bodyfile="src/matchers/PortMatcher.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a21e6809bbd32312c91c46e677489ed16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeFieldMatcher</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makeFieldMatcher</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>AST matcher to detect field declarations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>The generic field matcher has the following conditions.<itemizedlist>
<listitem><para>It is in the main provided file (not in the library files).</para>
</listitem><listitem><para>It is derived from sc_module</para>
</listitem><listitem><para>For each child that is a FieldDecl,<itemizedlist>
<listitem><para>The type of it is a C++ class whose class name is &quot;name&quot;</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="114" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="114" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1aa23d0e0720b102dd9f5b99cc2af9da4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeSignalArrayType</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>makeSignalArrayType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a matcher to identify sc_signal. The reason for this matcher is for it to match arrays of sc_signals as well. The conditions are as follows:<itemizedlist>
<listitem><para>It must be a FieldDecl<itemizedlist>
<listitem><para>It must have a type that is either an array whose type is a c++ class derived from a class name called &quot;name&quot;</para>
</listitem><listitem><para>Or, it is has a type that is a c++ class that is derived from class name &quot;name&quot;. </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="141" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a8386ce39015a0c2e27b7abd022b2331c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::signalMatcher</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>signalMatcher</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="151" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="151" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ac45ad8918c6b3ace857842a6e41eb7d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeSignalMatcher</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makeSignalMatcher</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="187" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1add66f655ad7ede0fe79c9b339ccba482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeArrayTypeMatcher</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>makeArrayTypeMatcher</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="193" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1aa216994927873cee14ae2d889fb6f382" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::portNameMatcher</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>portNameMatcher</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a matcher for sc_port. It has the following conditions:<itemizedlist>
<listitem><para>It must be a FieldDecl<itemizedlist>
<listitem><para>It has a type that is an array whose type has a name &quot;name&quot;</para>
</listitem><listitem><para>Or, it has a type that is a C++ class whose class name is &quot;name&quot;.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>I&apos;m not sure how to do 1d,2d,3d array matching other than the way it is done. The key idea is to see that there is an arrayType() within an arrayType(), and so on. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="206" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="206" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a6062254c872b265293c9a384f8ec3f39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makePortHasNameMatcher</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makePortHasNameMatcher</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="264" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a70ceea1e69e277a55c60533d42117ed0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makePortHasNamedDeclNameMatcher</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makePortHasNamedDeclNameMatcher</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a matcher for sc_in_clk since it uses a NamedDecl. It has the following conditions:<itemizedlist>
<listitem><para>It must be a FieldDecl,<itemizedlist>
<listitem><para>It has a type that is an array whose type has a name &quot;name&quot;.</para>
</listitem><listitem><para>Or, it has a type that is a NamedDecl whose name is &quot;name&quot;. </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="276" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="276" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a9b33046ea76702cc1c8d163b75ce5e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeArraySubModule</definition>
        <argsstring>(llvm::StringRef name)</argsstring>
        <name>makeArraySubModule</name>
        <param>
          <type>llvm::StringRef</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="286" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="286" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a6b4fe3147cce017779723220a7860064" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::makeMemberIsSubModule</definition>
        <argsstring>()</argsstring>
        <name>makeMemberIsSubModule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="298" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="298" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a3d8d06b809af592cc82099c54fa93368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NodeType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::checkMatch</definition>
        <argsstring>(const std::string &amp;name, const MatchFinder::MatchResult &amp;result)</argsstring>
        <name>checkMatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const MatchFinder::MatchResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="350" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a20ca4349a2d84d35992a77ad30805430" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::PortMatcher::printTemplateArguments</definition>
        <argsstring>(MemberDeclType &amp;found_ports)</argsstring>
        <name>printTemplateArguments</name>
        <param>
          <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
          <declname>found_ports</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="355" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ac537904be7197f770dfcc317481cc624" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sc_ast_matchers::PortMatcher::parseTemplateType</definition>
        <argsstring>(const T *fd)</argsstring>
        <name>parseTemplateType</name>
        <param>
          <type>const T *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="367" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="367" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a4d4a0d38c8dcfd0cca88fdd4056fa92d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sc_ast_matchers::PortMatcher::insert_port</definition>
        <argsstring>(MemberDeclType &amp;port, T *decl, bool isFieldDecl=true)</argsstring>
        <name>insert_port</name>
        <param>
          <type><ref refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" kindref="member">MemberDeclType</ref> &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFieldDecl</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Cast it to see if it&apos;s array type.</para>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="377" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="377" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1a399a97f258fecfb0c5bca9de84a92822" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::PortMatcher::registerMatchers</definition>
        <argsstring>(MatchFinder &amp;finder)</argsstring>
        <name>registerMatchers</name>
        <param>
          <type>MatchFinder &amp;</type>
          <declname>finder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Matchers for compositions. These matchers are used to form other matchers. <linebreak/>
</para>
<para>Matches all the SystemC Ports.</para>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="453" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="453" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ad9f8dff551d34080d67d973c119edab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void sc_ast_matchers::PortMatcher::run</definition>
        <argsstring>(const MatchFinder::MatchResult &amp;result)</argsstring>
        <name>run</name>
        <param>
          <type>const MatchFinder::MatchResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Array types</para>
<para>Submodules</para>
<para>Not a submodule and not a port</para>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="560" column="16" bodyfile="src/matchers/PortMatcher.h" bodystart="560" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classsc__ast__matchers_1_1PortMatcher_1ae641d2f5b01bb74dba999630d3b779c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sc_ast_matchers::PortMatcher::dump</definition>
        <argsstring>()</argsstring>
        <name>dump</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matchers/PortMatcher.h" line="705" column="8" bodyfile="src/matchers/PortMatcher.h" bodystart="705" bodyend="717"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class <ref refid="classsc__ast__matchers_1_1PortMatcher" kindref="compound">PortMatcher</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This class identifies a SystemC module&apos;s port declaration, and nested submodules as well. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::PortMatcher</label>
        <link refid="classsc__ast__matchers_1_1PortMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>MatchFinder::MatchCallback</label>
      </node>
      <node id="1">
        <label>sc_ast_matchers::PortMatcher</label>
        <link refid="classsc__ast__matchers_1_1PortMatcher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/matchers/PortMatcher.h" line="43" column="1" bodyfile="src/matchers/PortMatcher.h" bodystart="43" bodyend="718"/>
    <listofallmembers>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a3d8d06b809af592cc82099c54fa93368" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>checkMatch</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a6c9455bf67e1f10d2f466b787fe86eed" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>clock_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ae641d2f5b01bb74dba999630d3b779c2" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>dump</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a999daf8b4930ebb7910de642011227db" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getClockPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a1ad8937d9f60d552594f8f3fdedb0e18" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getInOutPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a931f9cd871638761ba1442053aca90a7" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getInputPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a2ab5f114faa28b64cd7082c4964fe2f1" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getInputStreamPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a65778692eb11492e527165156e90ea18" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getOtherVars</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ab6015537c8e1640a738da4e406923fe2" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getOutputPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a77709066aca9433c605accb3dfcde857" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getOutputStreamPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a0a3bb14d0f664ad16baad96c92e3b54d" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getPorts</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ae61a181de0ab202424e9735dab85a456" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getSignals</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1acbae38d79009ad6c41e31eb4deb935a7" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>getSubmodules</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a6cd9c1fbdce7a63e2290869a3a2d91bd" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>in_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ac8656e52700fdf69ef385e6053f413a6" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>inout_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a4d4a0d38c8dcfd0cca88fdd4056fa92d" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>insert_port</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a9ed1d0cc8e4537b8862a0422640e9550" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>instream_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a9b33046ea76702cc1c8d163b75ce5e4d" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeArraySubModule</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1add66f655ad7ede0fe79c9b339ccba482" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeArrayTypeMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a21e6809bbd32312c91c46e677489ed16" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeFieldMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a6b4fe3147cce017779723220a7860064" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeMemberIsSubModule</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a70ceea1e69e277a55c60533d42117ed0" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makePortHasNamedDeclNameMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a6062254c872b265293c9a384f8ec3f39" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makePortHasNameMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1aa23d0e0720b102dd9f5b99cc2af9da4f" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeSignalArrayType</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ac45ad8918c6b3ace857842a6e41eb7d6" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>makeSignalMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ae8f416e37b31a66f4fa78cda64cf1f02" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>MemberDeclType</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1aad7fa3383018549914978aa2ae70cbe0" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>other_fields_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a6c758be3a03eda8017b63e7b1d26005f" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>out_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a1871cef913dd1e3f60e698b9b70e429e" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>outstream_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ac537904be7197f770dfcc317481cc624" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>parseTemplateType</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a1bd74e34abdc8377be310d1f1580fc05" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>PortMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1aa216994927873cee14ae2d889fb6f382" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>portNameMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a20ca4349a2d84d35992a77ad30805430" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>printTemplateArguments</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a399a97f258fecfb0c5bca9de84a92822" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>registerMatchers</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1ad9f8dff551d34080d67d973c119edab8" prot="public" virt="virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>run</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1aee2cffb6787abffd58c2fb924e41c0bb" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>sc_ports_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1abf60489f8beb59c611631acf505ec127" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>signal_fields_</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a8386ce39015a0c2e27b7abd022b2331c" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>signalMatcher</name></member>
      <member refid="classsc__ast__matchers_1_1PortMatcher_1a3bf521271c460c87b76f2e4dcce26463" prot="public" virt="non-virtual"><scope>sc_ast_matchers::PortMatcher</scope><name>submodules_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
