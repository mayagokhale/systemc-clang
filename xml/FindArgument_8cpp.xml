<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="FindArgument_8cpp" kind="file" language="C++">
    <compoundname>FindArgument.cpp</compoundname>
    <includes refid="FindArgument_8h" local="yes">FindArgument.h</includes>
    <incdepgraph>
      <node id="5">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="4">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="2">
        <label>FindArgument.h</label>
        <link refid="FindArgument_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/matchers/FindArgument.cpp</label>
        <link refid="FindArgument_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>clang/AST/DeclCXX.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FindArgument_8h" kindref="compound">FindArgument.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classsystemc__clang_1_1FindArgument_1ad7571a690038b771d857b08a2a558277" kindref="member">FindArgument::FindArgument</ref>(Expr<sp/>*e)<sp/>:<sp/>expression_(e)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>TraverseStmt(expression_);</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">FindArgument::~FindArgument()<sp/>{<sp/><ref refid="classsystemc__clang_1_1FindArgument_1a1e675602a667da1286753f796bd494af" kindref="member">expression_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1ab18a59ccf070543386e8c789ebf771bb" kindref="member">FindArgument::VisitMemberExpr</ref>(MemberExpr<sp/>*member_expr)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref><sp/>=<sp/>member_expr-&gt;getMemberNameInfo().getAsString();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1ae586b3b1fe6346798094087329046d3d" kindref="member">FindArgument::VisitDeclRefExpr</ref>(DeclRefExpr<sp/>*declaration_ref)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref><sp/>=<sp/>declaration_ref-&gt;getFoundDecl()-&gt;getNameAsString();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1a5cb378afcbf202f0bfd59f685cdd7b3b" kindref="member">FindArgument::VisitIntegerLiteral</ref>(IntegerLiteral<sp/>*integer_literal)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref><sp/>=<sp/>integer_literal-&gt;getValue().toString(10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1a6718bb6bf1c540da785e0c92d757c0f9" kindref="member">FindArgument::VisitCXXBoolLiteralExpr</ref>(CXXBoolLiteralExpr<sp/>*boolean_expr)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boolean_expr-&gt;getValue()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1a29d16bd7020286a4762d960a5ea88e32" kindref="member">FindArgument::getArgumentName</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindArgument_1adc5dfffc9ef8c32873317bee6936d719" kindref="member">argument_name_</ref>;<sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/matchers/FindArgument.cpp"/>
  </compounddef>
</doxygen>
