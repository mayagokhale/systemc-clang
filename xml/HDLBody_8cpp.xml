<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="HDLBody_8cpp" kind="file" language="C++">
    <compoundname>HDLBody.cpp</compoundname>
    <includes refid="SystemCClang_8h" local="yes">SystemCClang.h</includes>
    <includes refid="HDLBody_8h" local="yes">HDLBody.h</includes>
    <includes refid="HDLType_8h" local="yes">HDLType.h</includes>
    <includes local="yes">clang/Basic/OperatorKinds.h</includes>
    <includes local="yes">clang/Basic/Diagnostic.h</includes>
    <incdepgraph>
      <node id="55">
        <label>InterfaceDecl.h</label>
        <link refid="InterfaceDecl_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>clang/AST/Decl.h</label>
      </node>
      <node id="54">
        <label>queue</label>
      </node>
      <node id="5">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="33">
        <label>clang/Analysis/CFG.h</label>
      </node>
      <node id="66">
        <label>HDLBody.h</label>
        <link refid="HDLBody_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="71">
        <label>llvm/ADT/StringRef.h</label>
      </node>
      <node id="32">
        <label>clang/AST/ParentMap.h</label>
      </node>
      <node id="72">
        <label>hNode.h</label>
        <link refid="hNode_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>clang/Analysis/CFGStmtMap.h</label>
      </node>
      <node id="2">
        <label>SystemCClang.h</label>
        <link refid="SystemCClang_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="4">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="69">
        <label>clang/AST/Stmt.h</label>
      </node>
      <node id="1">
        <label>plugins/hdl/HDLBody.cpp</label>
        <link refid="HDLBody_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>InstanceMatcher.h</label>
        <link refid="InstanceMatcher_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>clang/Frontend/CompilerInstance.h</label>
      </node>
      <node id="46">
        <label>FindSimTime.h</label>
        <link refid="FindSimTime_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>clang/AST/ASTConsumer.h</label>
      </node>
      <node id="7">
        <label>clang/Frontend/FrontendPluginRegistry.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="70">
        <label>clang/Basic/Diagnostic.h</label>
      </node>
      <node id="67">
        <label>unordered_set</label>
      </node>
      <node id="43">
        <label>json.hpp</label>
      </node>
      <node id="49">
        <label>FindEntryFunctions.h</label>
        <link refid="FindEntryFunctions_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>FindTemplateTypes.h</label>
        <link refid="FindTemplateTypes_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>PortMatcher.h</label>
        <link refid="PortMatcher_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>WaitContainer.h</label>
        <link refid="WaitContainer_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>NotifyContainer.h</label>
        <link refid="NotifyContainer_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>EventContainer.h</label>
        <link refid="EventContainer_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>clang/ASTMatchers/ASTMatchers.h</label>
      </node>
      <node id="10">
        <label>model/Model.h</label>
        <link refid="Model_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>clang/AST/Expr.h</label>
      </node>
      <node id="76">
        <label>clang/Basic/OperatorKinds.h</label>
      </node>
      <node id="30">
        <label>Automata.h</label>
        <link refid="Automata_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>FindNetlist.h</label>
        <link refid="FindNetlist_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>clang/AST/Type.h</label>
      </node>
      <node id="58">
        <label>ProcessDecl.h</label>
        <link refid="ProcessDecl_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>tuple</label>
      </node>
      <node id="41">
        <label>systemc-clang.h</label>
        <link refid="systemc-clang_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Matchers.h</label>
        <link refid="Matchers_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>Tree.h</label>
        <link refid="Tree_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stack</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="9">
        <label>clang/Tooling/Tooling.h</label>
      </node>
      <node id="57">
        <label>PortDecl.h</label>
        <link refid="PortDecl_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sstream</label>
      </node>
      <node id="47">
        <label>ModuleInstance.h</label>
        <link refid="ModuleInstance_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>SuspensionAutomata.h</label>
        <link refid="SuspensionAutomata_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>FindNotify.h</label>
        <link refid="FindNotify_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>clang/AST/ExprCXX.h</label>
      </node>
      <node id="56">
        <label>PortBinding.h</label>
        <link refid="PortBinding_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>SCuitable/FindGPUMacro.h</label>
        <link refid="FindGPUMacro_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>deque</label>
      </node>
      <node id="25">
        <label>FindWait.h</label>
        <link refid="FindWait_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>FindConstructor.h</label>
        <link refid="FindConstructor_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>ctype.h</label>
      </node>
      <node id="21">
        <label>llvm/Support/Debug.h</label>
      </node>
      <node id="37">
        <label>Utility.h</label>
        <link refid="Utility_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>ModuleInstanceType.h</label>
        <link refid="ModuleInstanceType_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>SensitivityMatcher.h</label>
        <link refid="SensitivityMatcher_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>HDLType.h</label>
        <link refid="HDLType_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>EntryFunctionContainer.h</label>
        <link refid="EntryFunctionContainer_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>clang/AST/DeclCXX.h</label>
      </node>
      <node id="40">
        <label>FindGlobalEvents.h</label>
        <link refid="FindGlobalEvents_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="59">
        <label>SignalDecl.h</label>
        <link refid="SignalDecl_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>clang/ASTMatchers/ASTMatchFinder.h</label>
      </node>
      <node id="65">
        <label>set</label>
      </node>
      <node id="8">
        <label>clang/Tooling/CommonOptionsParser.h</label>
      </node>
      <node id="50">
        <label>FindTLMInterfaces.h</label>
        <link refid="FindTLMInterfaces_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>algorithm</label>
      </node>
      <node id="36">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>ArrayTypeUtils.h</label>
        <link refid="ArrayTypeUtils_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesystemc__hdl">systemc_hdl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="HDLBody_8cpp_1ad78e062f62e0d6e453941fb4ca843e4d" prot="public" static="no">
        <name>DEBUG_TYPE</name>
        <initializer>&quot;HDL&quot;</initializer>
        <briefdescription>
<para>Different matchers may use different DEBUG_TYPE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="plugins/hdl/HDLBody.cpp" line="11" column="10" bodyfile="plugins/hdl/HDLBody.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SystemCClang_8h" kindref="compound">SystemCClang.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="HDLBody_8h" kindref="compound">HDLBody.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="HDLType_8h" kindref="compound">HDLType.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/Basic/OperatorKinds.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clang/Basic/Diagnostic.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor">#undef<sp/>DEBUG_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_TYPE<sp/>&quot;HDL&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>use<sp/>the<sp/>Traverse<sp/>pattern<sp/>rather<sp/>than<sp/>Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>need<sp/>control<sp/>to<sp/>come<sp/>back<sp/>to<sp/>the<sp/>point<sp/>of<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>the<sp/>generated<sp/>tree<sp/>can<sp/>be<sp/>returned<sp/>back<sp/>up<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>https://github.com/super-ast/cpptranslate<sp/>as<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehnode" kindref="compound">hnode</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespacesystemc__hdl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__hdl" kindref="compound">systemc_hdl</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>HDLBody::HDLBody(CXXMethodDecl<sp/>*emd,<sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;h_top,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang::DiagnosticsEngine<sp/>&amp;diag_engine,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ASTContext<sp/>&amp;ast_context<sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>diag_e{diag_engine},<sp/>ast_context_{ast_context}<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entering<sp/>HDLBody<sp/>constructor<sp/>(method<sp/>body\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>add_info<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret1<sp/>=<sp/>TraverseStmt(emd-&gt;getBody());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>AddVnames(h_top);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>h_top-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exiting<sp/>HDLBody<sp/>constructor<sp/>(method<sp/>body)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>HDLBody::HDLBody(Stmt<sp/>*stmt,<sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;h_top,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang::DiagnosticsEngine<sp/>&amp;diag_engine,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ASTContext<sp/>&amp;ast_context,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_info)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>diag_e{diag_engine},<sp/>add_info{add_info},<sp/>ast_context_{ast_context}<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add_info<sp/>determines<sp/>whether<sp/>additional<sp/>information<sp/>is<sp/>added<sp/>to<sp/>hcode<sp/>operands<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>needed<sp/>by<sp/>downstream<sp/>hcode<sp/>processing<sp/>of<sp/>the<sp/>cxxdeclconstructor<sp/>to<sp/>recover</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>port<sp/>bindings<sp/>and<sp/>sensitivity<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret1<sp/>=<sp/>TraverseStmt(stmt);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddVnames(h_top);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_top-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exiting<sp/>HDLBody<sp/>constructor<sp/>(stmt)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>HDLBody::~HDLBody()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[[<sp/>Destructor<sp/>HDLBody<sp/>]]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>of<sp/>checking<sp/>is<sp/>important<sp/>as<sp/>some<sp/>exprs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inherit<sp/>from<sp/>binaryoperator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseStmt(Stmt<sp/>*stmt)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseStmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stmt<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>statement,<sp/>keep<sp/>going</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CompoundStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;calling<sp/>traverse<sp/>compoundstmt<sp/>from<sp/>traversestmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseCompoundStmt((CompoundStmt<sp/>*)stmt);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;DeclStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseDeclStmt((DeclStmt<sp/>*)stmt);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CallExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CXXOperatorCallExpr<sp/>*opercall<sp/>=<sp/>dyn_cast&lt;CXXOperatorCallExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>cxxoperatorcallexpr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseCXXOperatorCallExpr(opercall);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CXXMemberCallExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseCXXMemberCallExpr((CXXMemberCallExpr<sp/>*)stmt);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseCallExpr((CallExpr<sp/>*)stmt);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;BinaryOperator&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseBinaryOperator((BinaryOperator<sp/>*)stmt);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;UnaryOperator&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseUnaryOperator((UnaryOperator<sp/>*)stmt);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;ConditionalOperator&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseConditionalOperator((ConditionalOperator<sp/>*)stmt);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;MaterializeTemporaryExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(((MaterializeTemporaryExpr<sp/>*)stmt)-&gt;getSubExpr());</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TraverseStmt(((MaterializeTemporaryExpr<sp/>*)<sp/>stmt)-&gt;getTemporary());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;DeclRefExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseDeclRefExpr((DeclRefExpr<sp/>*)stmt);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;MemberExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseMemberExpr((MemberExpr<sp/>*)stmt);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;IntegerLiteral&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseIntegerLiteral((IntegerLiteral<sp/>*)stmt);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CXXBoolLiteralExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseCXXBoolLiteralExpr((CXXBoolLiteralExpr<sp/>*)stmt);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;IfStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>if<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseIfStmt((IfStmt<sp/>*)stmt);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;ForStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>if<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseForStmt((ForStmt<sp/>*)stmt);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;SwitchStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>switch<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseSwitchStmt((SwitchStmt<sp/>*)stmt);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CaseStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>case<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>old_hret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hcasep<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hSwitchCase);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ConstantExpr<sp/>*expr<sp/>=</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dyn_cast&lt;ConstantExpr&gt;(((CaseStmt<sp/>*)stmt)-&gt;getLHS()))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>llvm::APSInt<sp/>val<sp/>=<sp/>expr-&gt;getResultAsAPSInt();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(val.toString(10),<sp/>hNode::hdlopsEnum::hLiteral));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(((CaseStmt<sp/>*)stmt)-&gt;getSubStmt());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_hret)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hcasep;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;DefaultStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>default<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>old_hret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hcasep<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hSwitchDefault);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(((DefaultStmt<sp/>*)stmt)-&gt;getSubStmt());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_hret)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hcasep;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;BreakStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cxx_record_id<sp/>=</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag_e.getCustomDiagID(clang::DiagnosticsEngine::Remark,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>stmt<sp/>not<sp/>supported,<sp/>substituting<sp/>noop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clang::DiagnosticBuilder<sp/>diag_builder{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag_e.Report(stmt-&gt;getBeginLoc(),<sp/>cxx_record_id)};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>break<sp/>stmt,<sp/>substituting<sp/>noop\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hNoop);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CXXDefaultArgExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(((CXXDefaultArgExpr<sp/>*)stmt)-&gt;getExpr());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;ReturnStmt&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hretstmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hReturnStmt);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((ReturnStmt<sp/>*)stmt)-&gt;getRetValue()<sp/>!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(((ReturnStmt<sp/>*)stmt)-&gt;getRetValue());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>hretstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hretstmt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CXXTemporaryObjectExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nargs<sp/>=<sp/>((CXXTemporaryObjectExpr<sp/>*)stmt)-&gt;getNumArgs();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nargs<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>the<sp/>road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hNode::hdlopsEnum::hLiteral));<sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>this<sp/>is<sp/>an<sp/>initializer<sp/>of<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr<sp/>**objargs<sp/>=<sp/>((CXXTemporaryObjectExpr<sp/>*)stmt)-&gt;getArgs();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nargs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(objargs[i]);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CXXConstructExpr&gt;(stmt))<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>CXXConstructExpr<sp/>*exp<sp/>=<sp/>(CXXConstructExpr<sp/>*)stmt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp-&gt;getNumArgs()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>(isa&lt;IntegerLiteral&gt;(exp-&gt;getArg(0))))<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CXXConstructExpr<sp/>followed<sp/>by<sp/>integer<sp/>literal<sp/>found\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(exp-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IntegerLiteral<sp/>*lit<sp/>=<sp/>(IntegerLiteral<sp/>*)exp-&gt;getArg(0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>lit-&gt;getValue().toString(10,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>add<sp/>type<sp/>to<sp/>back<sp/>of<sp/>h_ret</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref><sp/>*te<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>te-&gt;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1ae648d1354e92813a492ccb2f7011d183" kindref="member">Enumerate</ref>((exp-&gt;getType()).getTypePtr());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHDLType" kindref="compound">HDLType</ref><sp/>HDLt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_tmp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hNoop);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HDLt.<ref refid="classHDLType_1a6438b9a449e3fedf55ab579878a33480" kindref="member">SCtype2hcode</ref>(s,<sp/>te-&gt;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a6379b187759bbf16c8e378d2716cf3e9" kindref="member">getTemplateArgTreePtr</ref>(),<sp/>0,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hLiteral,<sp/>h_tmp);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_tmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.back();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stmt<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stmt-&gt;getStmtClassName()</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>recognized,<sp/>calling<sp/>default<sp/>recursive<sp/>ast<sp/>visitor\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>oldh_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveASTVisitor::TraverseStmt(stmt);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>oldh_ret)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::dbgs()</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;default<sp/>recursive<sp/>ast<sp/>visitor<sp/>called<sp/>-<sp/>returning<sp/>translation\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>:<sp/>stmt-&gt;children())<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;child<sp/>stmt<sp/>type<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>((Stmt<sp/>*)arg)-&gt;getStmtClassName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(arg);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>==<sp/>oldh_ret)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;child<sp/>stmt<sp/>not<sp/>handled\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>output<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(arg-&gt;getStmtClassName(),<sp/>hNode::hdlopsEnum::hUnimpl);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseCompoundStmt(CompoundStmt<sp/>*cstmt)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Traverse<sp/>each<sp/>statement<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_cstmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hCStmt);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(clang::Stmt<sp/>*stmt<sp/>:<sp/>cstmt-&gt;body())<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(stmt);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isAssignOp(h_ret)<sp/>)<sp/>&amp;&amp;<sp/>(h_ret-&gt;child_list.size()<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isAssignOp(h_ret-&gt;child_list[1]))){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>htmp<sp/>=<sp/>NormalizeHcode(h_ret);<sp/></highlight><highlight class="comment">//<sp/>break<sp/>up<sp/>assignment<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h_ret<sp/>=<sp/>NormalizeHcode(h_ret);<sp/>//<sp/>break<sp/>up<sp/>assignment<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_cstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.insert(h_cstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end(),</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>htmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin(),<sp/>htmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h_cstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stmt<sp/>result<sp/>was<sp/>empty\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_cstmt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseDeclStmt(DeclStmt<sp/>*declstmt)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hNodep<sp/>h_varlist<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(!declstmt-&gt;isSingleDecl())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>h_varlist<sp/>=<sp/>new<sp/>hNode(hNode::hdlopsEnum::hPortsigvarlist);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>https://clang.llvm.org/doxygen/DeadStoresChecker_8cpp_source.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*DI<sp/>:<sp/>declstmt-&gt;decls())</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DI)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*vardecl<sp/>=<sp/>dyn_cast&lt;VarDecl&gt;(DI);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vardecl)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessVarDecl(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vardecl);<sp/><sp/></highlight><highlight class="comment">//<sp/>adds<sp/>it<sp/>to<sp/>the<sp/>list<sp/>of<sp/>renamed<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>h_ret<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::ProcessVarDecl(VarDecl<sp/>*vardecl)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ProcessVarDecl<sp/>var<sp/>name<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vardecl-&gt;getName()</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_varlist<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hPortsigvarlist);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>QualType<sp/>q<sp/>=<sp/>vardecl-&gt;getType();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>*tp<sp/>=<sp/>q.getTypePtr();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ProcessVarDecl<sp/>type<sp/>name<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>q.getAsString()</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref><sp/>*te<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1FindTemplateTypes" kindref="compound">FindTemplateTypes</ref>();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>te-&gt;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1ae648d1354e92813a492ccb2f7011d183" kindref="member">Enumerate</ref>(tp);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHDLType" kindref="compound">HDLType</ref><sp/>HDLt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>HDLt.<ref refid="classHDLType_1a6438b9a449e3fedf55ab579878a33480" kindref="member">SCtype2hcode</ref>(vardecl-&gt;getName().str(),<sp/>te-&gt;<ref refid="classsystemc__clang_1_1FindTemplateTypes_1a6379b187759bbf16c8e378d2716cf3e9" kindref="member">getTemplateArgTreePtr</ref>(),<sp/>NULL,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hVardecl,<sp/>h_varlist);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_vardecl<sp/>=<sp/>h_varlist-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.back();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr<sp/>*declinit<sp/>=<sp/>vardecl-&gt;getInit())<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(declinit);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>newn<sp/>=<sp/>lname.newname();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>h_vardecl-&gt;<ref refid="classhnode_1_1hNode_1a59ce73e9dec57311dc1fc18b7ab66aac" kindref="member">set</ref>(newn);<sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>original<sp/>name<sp/>with<sp/>new<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhnode_1_1names__t" kindref="compound">names_t</ref><sp/>names<sp/>=<sp/>{vardecl-&gt;getName().str(),<sp/>newn,<sp/>h_vardecl};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>vname_map[vardecl]<sp/>=<sp/>names;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>varinitp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hVarAssign);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varinitp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(newn,<sp/>hNode::hdlopsEnum::hVarref));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varinitp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>varinitp;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseBinaryOperator(BinaryOperator<sp/>*expr)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>handle<sp/>expr.<sp/>Can<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>isIntegerConstantExpr(llvm::APSInt<sp/>&amp;Result,<sp/>const<sp/>ASTContext<sp/>&amp;Ctx,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLocation<sp/>*Loc<sp/>=<sp/>nullptr,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>isEvaluated<sp/>=<sp/>true)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_binop<sp/>=</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(expr-&gt;getOpcodeStr().str(),</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hBinop);<sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>to<sp/>hold<sp/>binop<sp/>expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>TraverseBinaryOperator,<sp/>opcode<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr-&gt;getOpcodeStr()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getLHS());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>h_binop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>save_h_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getRHS());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>==<sp/>save_h_ret)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_binop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_binop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_binop;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseUnaryOperator(UnaryOperator<sp/>*expr)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>TraverseUnaryOperator<sp/>expr<sp/>node<sp/>is<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(expr-&gt;dump(llvm::dbgs(),<sp/>ast_context_);<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>opcstr<sp/>=<sp/>expr-&gt;getOpcode();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_unop<sp/>=</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(expr-&gt;getOpcodeStr(opcstr).str(),</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hUnop);<sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>to<sp/>hold<sp/>unop<sp/>expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getSubExpr());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>h_unop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_unop;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseConditionalOperator(ConditionalOperator<sp/>*expr)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>TraverseConditionalOperator<sp/>expr<sp/>node<sp/>is<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(expr-&gt;dump(llvm::dbgs(),<sp/>ast_context_);<sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_condop<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hCondop);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getCond());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>h_condop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_ret);<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>if<sp/>it&apos;s<sp/>null<sp/>or<sp/>didn&apos;t<sp/>get<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getTrueExpr());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>h_condop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_ret);<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>if<sp/>it&apos;s<sp/>null<sp/>or<sp/>didn&apos;t<sp/>get<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getFalseExpr());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>h_condop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_ret);<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>if<sp/>it&apos;s<sp/>null<sp/>or<sp/>didn&apos;t<sp/>get<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_condop;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseIntegerLiteral(IntegerLiteral<sp/>*lit)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>integerliteral\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>lit-&gt;getValue().toString(10,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(s,<sp/>hNode::hdlopsEnum::hLiteral);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseCXXBoolLiteralExpr(CXXBoolLiteralExpr<sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>boollitexpr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>b-&gt;getValue();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(v<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hLiteral);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseDeclRefExpr(DeclRefExpr<sp/>*expr)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>handle<sp/>expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseDeclRefExpr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueDecl<sp/>*value<sp/>=<sp/>expr-&gt;getDecl();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;EnumConstantDecl&gt;(value))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnumConstantDecl<sp/>*cd<sp/>=<sp/>(EnumConstantDecl<sp/>*)value;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;got<sp/>enum<sp/>constant<sp/>value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cd-&gt;getInitVal()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(cd-&gt;getInitVal().toString(10),<sp/>hNode::hdlopsEnum::hLiteral);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>(expr-&gt;getNameInfo()).getName().getAsString();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;name<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>variable<sp/>reference<sp/>has<sp/>a<sp/>constant<sp/>initializer,<sp/>return<sp/>that<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;VarDecl&gt;(value)<sp/>&amp;&amp;<sp/>((VarDecl<sp/>*)value)-&gt;isConstexpr())<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarDecl<sp/>*vard<sp/>=<sp/>(VarDecl<sp/>*)value;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>*einit<sp/>=<sp/>vard-&gt;getInit();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clang::Expr::EvalResult<sp/>result;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(einit-&gt;EvaluateAsInt(result,<sp/>vard-&gt;getASTContext()))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(result.Val.getInt().toString(10),</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hLiteral);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;FunctionDecl&gt;(value))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>similar<sp/>to<sp/>method<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FunctionDecl<sp/>*funval<sp/>=<sp/>(FunctionDecl<sp/>*)value;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>qualfuncname{value-&gt;getQualifiedNameAsString()};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lutil.make_ident(qualfuncname);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_info)<sp/>qualfuncname<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+<sp/>name;<sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>add<sp/>unqualified<sp/>name<sp/>for<sp/>future<sp/>hcode<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>methodecls[qualfuncname]<sp/>=</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FunctionDecl<sp/>*)value;<sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>list<sp/>of<sp/>&quot;methods&quot;<sp/>to<sp/>be<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>call<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hfuncall<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(qualfuncname,<sp/>hNode::hdlopsEnum::hMethodCall);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hfuncall;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>newname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vname_it{vname_map.find(expr-&gt;getDecl())};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vname_it<sp/>!=<sp/>vname_map.end())<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newname<sp/>=<sp/>vname_map[expr-&gt;getDecl()].newn;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>name<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>newname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(value-&gt;dump(llvm::dbgs()));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(newname.empty()<sp/>?<sp/>name<sp/>:<sp/>newname,<sp/>hNode::hdlopsEnum::hVarref);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseArraySubscriptExpr(ArraySubscriptExpr<sp/>*expr)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseArraySubscriptExpr,<sp/>tree<sp/>follows\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(expr-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_arrexpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight><highlight class="stringliteral">&quot;ARRAYSUBSCRIPT&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hBinop);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getLHS());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>h_arrexpr-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(expr-&gt;getRHS());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>h_arrexpr-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_arrexpr;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseCXXMemberCallExpr(CXXMemberCallExpr<sp/>*callexpr)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseCXXMemberCallExpr,<sp/>printing<sp/>implicit<sp/>object<sp/>arg\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieves<sp/>the<sp/>implicit<sp/>object<sp/>argument<sp/>for<sp/>the<sp/>member<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>in<sp/>&quot;x.f(5)&quot;,<sp/>this<sp/>returns<sp/>the<sp/>sub-expression<sp/>&quot;x&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr<sp/>*arg<sp/>=<sp/>(callexpr-&gt;getImplicitObjectArgument())-&gt;IgnoreImplicit();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(arg-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>QualType<sp/>argtyp<sp/>=<sp/>arg-&gt;getType();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>of<sp/>x<sp/>in<sp/>x.f(5)<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>argtyp.getAsString()</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>methodname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NoMethod&quot;</highlight><highlight class="normal">,<sp/>qualmethodname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NoQualMethod&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>CXXMethodDecl<sp/>*methdcl<sp/>=<sp/>callexpr-&gt;getMethodDecl();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/>&quot;methoddecl<sp/>follows\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LLVM_DEBUG(methdcl-&gt;dump(llvm::dbgs());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;NamedDecl&gt;(methdcl)<sp/>&amp;&amp;<sp/>methdcl-&gt;getDeclName())<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>methodname<sp/>=<sp/>methdcl-&gt;getNameAsString();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qualmethodname<sp/>=<sp/>methdcl-&gt;getQualifiedNameAsString();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make_ident(qualmethodname);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>methodecls[qualmethodname]<sp/>=<sp/>methdcl;<sp/><sp/>//<sp/>put<sp/>it<sp/>in<sp/>the<sp/>set<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>decls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;here<sp/>is<sp/>method<sp/>printname<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>methodname</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>qual<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>qualmethodname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(methodname.compare(0,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>means<sp/>compare<sp/>=,<sp/>8<sp/>is<sp/>len(&quot;operator&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>conversion<sp/>we<sp/>know<sp/>about,<sp/>can<sp/>be<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>operator<sp/>conversion<sp/>node\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(arg);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode_1a72bcc22543c267571a24ec713633e39a" kindref="member">hNode::hdlopsEnum</ref><sp/>opc;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>methodname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>type<sp/>of<sp/>x<sp/>in<sp/>x.f(5)<sp/>is<sp/>primitive<sp/>sc<sp/>type<sp/>(sc_in,<sp/>sc_out,<sp/>sc_inout,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sc_signal<sp/>and<sp/>method<sp/>name<sp/>is<sp/>either<sp/>read<sp/>or<sp/>write,<sp/>generate<sp/>a<sp/>SigAssignL|R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>FIXME<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>is<sp/>templated<sp/>to<sp/>a<sp/>primitive<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((methodname<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(lutil.isSCType(qualmethodname)))</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>hNode::hdlopsEnum::hSigAssignR;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((methodname<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(lutil.isSCType(qualmethodname)))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>hNode::hdlopsEnum::hSigAssignL;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lutil.isSCType(</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qualmethodname))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>operator<sp/>from<sp/>simulation<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>hNode::hdlopsEnum::hNoop;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>hNode::hdlopsEnum::hMethodCall;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lutil.make_ident(qualmethodname);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_info)<sp/>qualmethodname+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+<sp/>methodname;<sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>unqualified<sp/>name<sp/>for<sp/>future<sp/>hcode<sp/>processing<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>methodecls[qualmethodname]<sp/>=<sp/>methdcl;<sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>it<sp/>in<sp/>the<sp/>set<sp/>of<sp/>method<sp/>decls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>methodname<sp/>=<sp/>qualmethodname;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref><sp/>*h_callp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(methodname,<sp/>opc);<sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>to<sp/>hold<sp/>call<sp/>expr<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>save_hret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(arg);<sp/><sp/></highlight><highlight class="comment">//<sp/>traverse<sp/>the<sp/>x<sp/>in<sp/>x.f(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>&amp;&amp;<sp/>(h_ret<sp/>!=<sp/>save_hret))<sp/>h_callp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>:<sp/>callexpr-&gt;arguments())<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>save_h_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(arg);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>save_h_ret)<sp/>h_callp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_callp;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::isLogicalOp(clang::OverloadedOperatorKind<sp/>opc)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(opc)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_Less:</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_LessEqual:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_Greater:</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_GreaterEqual:</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_ExclaimEqual:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OO_EqualEqual:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseCXXOperatorCallExpr(CXXOperatorCallExpr<sp/>*opcall)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>operatorname<sp/>=<sp/>getOperatorSpelling(opcall-&gt;getOperator());</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>operatortype<sp/>=<sp/>(opcall-&gt;getType()).getAsString();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_operop;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseCXXOperatorCallExpr,<sp/>Operator<sp/>name<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>operatorname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>with<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>operatortype<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>follows\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(opcall-&gt;getType()-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lutil.isSCBuiltinType(operatortype)<sp/>||<sp/>lutil.isSCType(operatortype)<sp/>||</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>(opcall-&gt;getType())-&gt;isBuiltinType()<sp/>||<sp/>(operatorname<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>((operatorname==</highlight><highlight class="stringliteral">&quot;&lt;&lt;&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(operatortype.find(</highlight><highlight class="stringliteral">&quot;sensitive&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)))<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>operator<sp/>call<sp/>type\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator<sp/>for<sp/>an<sp/>SC<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((operatorname.compare(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(operatortype.find(</highlight><highlight class="stringliteral">&quot;subref&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>string::npos)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(opcall-&gt;getNumArgs()<sp/>==<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>h_operop<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight><highlight class="stringliteral">&quot;SLICE&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hBinop);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operatorname<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>subscript<sp/>in<sp/>operator<sp/>call<sp/>expre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_operop<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight><highlight class="stringliteral">&quot;ARRAYSUBSCRIPT&quot;</highlight><highlight class="normal">,<sp/>hNode::hdlopsEnum::hBinop);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_operop<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(operatorname,<sp/>hNode::hdlopsEnum::hBinop);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>opcall-&gt;getNumArgs();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>save_h_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(opcall-&gt;getArg(i));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>==<sp/>save_h_ret)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_operop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_operop-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;operator<sp/>call<sp/>argument<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>follows\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(opcall-&gt;getArg(i)-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_operop;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>yet<sp/>implemented<sp/>operator<sp/>call<sp/>expr,<sp/>opc<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>clang::getOperatorSpelling(opcall-&gt;getOperator())</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>num<sp/>arguments<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opcall-&gt;getNumArgs()</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>skipping\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(opcall-&gt;dump(llvm::dbgs(),<sp/>ast_context_));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseMemberExpr(MemberExpr<sp/>*memberexpr)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>TraverseMemberExpr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nameinfo<sp/>=<sp/>(memberexpr-&gt;getMemberNameInfo()).getName().getAsString();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;name<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nameinfo</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>base<sp/>and<sp/>memberexpr<sp/>trees<sp/>follow\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;base<sp/>is<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(memberexpr-&gt;getBase()-&gt;dump(llvm::dbgs(),<sp/>ast_context_);<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;memberdecl<sp/>is<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(memberexpr-&gt;getMemberDecl()-&gt;dump(llvm::dbgs()));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>traverse<sp/>the<sp/>memberexpr<sp/>in<sp/>case<sp/>it<sp/>is<sp/>a<sp/>nested<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>old_h_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(memberexpr-&gt;getBase());<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>hcode<sp/>for<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_h_ret)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hVarref)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concatenate<sp/>base<sp/>name<sp/>in<sp/>front<sp/>of<sp/>field<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>memexprnode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(h_ret-&gt;h_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;##&quot;</highlight><highlight class="normal"><sp/>+<sp/>nameinfo,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hVarref);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>h_ret;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>memexprnode;<sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>returned<sp/>h_ret<sp/>with<sp/>single<sp/>node,<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>names<sp/>concatenated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>returned<sp/>from<sp/>member<sp/>expr<sp/>base<sp/>was<sp/>not<sp/>Varref\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret-&gt;print(llvm::dbgs());</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>memexprnode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(nameinfo,<sp/>hNode::hdlopsEnum::hVarref);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>memexprnode-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>memexprnode;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h_ret-&gt;child_list.push_back(new<sp/>hNode(nameinfo,<sp/>hNode::hdlopsEnum::hVarref));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>*baseexpr<sp/>=<sp/>dyn_cast&lt;MemberExpr&gt;(memberexpr-&gt;getBase());<sp/>//<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>field<sp/>decl<sp/>if<sp/>(baseexpr)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>hNodep<sp/>old_h_ret<sp/>=<sp/>h_ret;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>TraverseStmt(baseexpr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(h_ret<sp/>!=<sp/>old_h_ret)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(h_ret-&gt;h_op<sp/>==<sp/>hNode::hdlopsEnum::hLiteral)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//concatenate<sp/>base<sp/>name<sp/>in<sp/>front<sp/>of<sp/>field<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>hNodep<sp/>memexprnode<sp/>=<sp/>new<sp/>hNode(h_ret-&gt;h_name+&quot;##&quot;+nameinfo,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hNode::hdlopsEnum::hLiteral);<sp/><sp/><sp/><sp/>delete<sp/>h_ret;<sp/><sp/><sp/>h_ret<sp/>=<sp/>memexprnode;<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>returned<sp/>h_ret<sp/>with<sp/>single<sp/>node,<sp/>field<sp/>names<sp/>concatenated<sp/><sp/><sp/><sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>h_ret;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(nameinfo,<sp/>hNode::hdlopsEnum::hVarref);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseCallExpr(CallExpr<sp/>*callexpr)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hcall<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hMethodCall);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>save_hret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;FunctionDecl&gt;(callexpr-&gt;getCalleeDecl())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>((FunctionDecl<sp/>*)callexpr-&gt;getCalleeDecl())-&gt;isConstexpr())<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Expr::EvalResult<sp/>res;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callexpr-&gt;EvaluateAsRValue(</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,<sp/>callexpr-&gt;getCalleeDecl()-&gt;getASTContext()))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(res.Val.getInt().toString(10),<sp/>hNode::hdlopsEnum::hLiteral);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(callexpr-&gt;getCallee());</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlike<sp/>methodcall,<sp/>the<sp/>function<sp/>call<sp/>name<sp/>will<sp/>hopefully<sp/>resolve<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declref.<sp/>in<sp/>traversedeclref,<sp/>we<sp/>create<sp/>the<sp/>hnode<sp/>for<sp/>the<sp/>function<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((h_ret<sp/>!=<sp/>save_hret)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>(h_ret-&gt;getopc()<sp/>==<sp/>hNode::hdlopsEnum::hMethodCall))<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcall<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcall<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hNode::hdlopsEnum::hMethodCall);<sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>name<sp/>was<sp/>more<sp/>complicated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcall-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>:<sp/>callexpr-&gt;arguments())<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>sret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(arg);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>sret)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>hcall-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hcall;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>a<sp/>call<sp/>expr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>AST<sp/>follows\n<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(callexpr-&gt;dump(llvm::dbgs(),<sp/>ast_context_););</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseIfStmt(IfStmt<sp/>*ifs)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_ifstmt,<sp/>h_ifc<sp/>=<sp/>NULL,<sp/>h_ifthen<sp/>=<sp/>NULL,<sp/>h_ifelse<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ifstmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hIfStmt);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifs-&gt;getConditionVariable())<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variable<sp/>declarations<sp/>are<sp/>not<sp/>allowed<sp/>in<sp/>if<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Variable<sp/>declarations<sp/>are<sp/>not<sp/>allowed<sp/>in<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;conditions,<sp/>skipping\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(ifs-&gt;getCond());</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ifc<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(ifs-&gt;getThen());</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>h_ifc)<sp/><sp/></highlight><highlight class="comment">//<sp/>unchanged<sp/>if<sp/>couldn&apos;t<sp/>translate<sp/>the<sp/>then<sp/>clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_ifthen<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifs-&gt;getElse())<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(ifs-&gt;getElse());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((h_ret<sp/>!=<sp/>h_ifc)<sp/>&amp;&amp;<sp/>(h_ret<sp/>!=<sp/>h_ifthen))<sp/>h_ifelse<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ifstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ifc);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ifstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ifthen);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ifelse)<sp/>h_ifstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ifelse);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_ifstmt;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseForStmt(ForStmt<sp/>*fors)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_forstmt,<sp/>h_forinit,<sp/>h_forcond,<sp/>h_forinc,<sp/>h_forbody;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forstmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hForStmt);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;CompoundStmt&gt;(fors-&gt;getInit()))</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Compound<sp/>stmt<sp/>not<sp/>handled<sp/>in<sp/>for<sp/>init,<sp/>skipping\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(isa&lt;DeclStmt&gt;(stmt))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(fors-&gt;getInit());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forinit<sp/>=<sp/>(h_ret<sp/>==<sp/>NULL)<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hNoop)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>h_ret;<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>if<sp/>in<sp/>place<sp/>var<sp/>decl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(fors-&gt;getCond());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forcond<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(fors-&gt;getInc());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forinc<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>loop<sp/>body\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(fors-&gt;getBody()-&gt;dump(llvm::dbgs(),<sp/>ast_context_<sp/>););</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(fors-&gt;getBody());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forbody<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_forinit);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_forcond);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_forinc);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>h_forstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_forbody);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_forstmt;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::ProcessSwitchCase(SwitchCase<sp/>*sc)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>ProcessSwitchCase\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hcasep;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>old_hret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isa&lt;DefaultStmt&gt;(sc))<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>default<sp/>stmt<sp/>in<sp/>switchcase\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcasep<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hSwitchDefault);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt((DefaultStmt<sp/>*)sc-&gt;getSubStmt());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>case<sp/>stmt<sp/>in<sp/>switchcase\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcasep<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hSwitchCase);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ConstantExpr<sp/>*expr<sp/>=</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dyn_cast&lt;ConstantExpr&gt;(((CaseStmt<sp/>*)sc)-&gt;getLHS()))<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>llvm::APSInt<sp/>val<sp/>=<sp/>expr-&gt;getResultAsAPSInt();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(val.toString(10),<sp/>hNode::hdlopsEnum::hLiteral));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt((CaseStmt<sp/>*)sc-&gt;getSubStmt());</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_hret)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hcasep-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>hcasep;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseSwitchStmt(SwitchStmt<sp/>*switchs)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_switchstmt;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Switch<sp/>stmt<sp/>body<sp/>-----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(switchs-&gt;getBody()-&gt;dump(llvm::dbgs(),<sp/>ast_context_););</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>Switch<sp/>stmt<sp/>body<sp/>-----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>h_switchstmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hSwitchStmt);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stmt<sp/>*<sp/>swinit<sp/>=<sp/>dyn_cast&lt;Stmt&gt;(switchs-&gt;getInit());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(swinit)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/>&quot;switch<sp/>init<sp/>not<sp/>handled,<sp/>skipping\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>old_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(switchs-&gt;getCond());</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_ret)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_switchstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_switchstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hUnimpl));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>old_ret<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(switchs-&gt;getBody());</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_ret<sp/>!=<sp/>old_ret)<sp/>h_switchstmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_ret);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(SwitchCase<sp/>*sc<sp/>=<sp/>switchs-&gt;getSwitchCaseList();<sp/>sc<sp/>!=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>sc<sp/>=<sp/>sc-&gt;getNextSwitchCase())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/>&quot;Switch<sp/>case\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>LLVM_DEBUG(sc-&gt;dump(llvm::dbgs()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(isa&lt;DefaultStmt&gt;(sc))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/>&quot;Found<sp/>default<sp/>stmt<sp/>in<sp/>case\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ProcessSwitchCase(sc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>h_switchstmt-&gt;child_list.push_back(h_ret);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TraverseStmt(switchs-&gt;getBody());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>h_switchbody<sp/>=<sp/>h_ret;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>h_switchstmt-&gt;child_list.push_back(h_switchinit);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>h_switchstmt-&gt;child_list.push_back(h_switchbody);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_switchstmt;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wouldn&apos;t<sp/>appear<sp/>in<sp/>a<sp/>SC_METHOD,<sp/>but<sp/>put<sp/>it<sp/>in<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>won&apos;t<sp/>put<sp/>in<sp/>do<sp/>stmt<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HDLBody::TraverseWhileStmt(WhileStmt<sp/>*whiles)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>h_whilestmt,<sp/>h_whilecond,<sp/>h_whilebody;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;While<sp/>stmt\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>h_whilestmt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hWhileStmt);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whiles-&gt;getConditionVariable())<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::dbgs()</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Variable<sp/>declarations<sp/>not<sp/>handled<sp/>in<sp/>while<sp/>condition,<sp/>skipping\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TraverseStmt(whiles-&gt;getCond());</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_whilecond<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseStmt(whiles-&gt;getBody());</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>h_whilebody<sp/>=<sp/>h_ret;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>h_whilestmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_whilecond);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>h_whilestmt-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(h_whilebody);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>h_ret<sp/>=<sp/>h_whilestmt;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HDLBody::AddVnames(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>&amp;hvns)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vname<sp/>Dump\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;var<sp/>:<sp/>vname_map)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LLVM_DEBUG(llvm::dbgs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var.second.oldn</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var.second.newn<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_info)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>this<sp/>var<sp/>decl<sp/>as<sp/>a<sp/>renamed<sp/>var<sp/>decl<sp/>and<sp/>tack<sp/>on<sp/>the<sp/>original<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>later<sp/>processing<sp/>of<sp/>hcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>var.second.h_vardeclp-&gt;h_op<sp/>=<sp/>hNode::hdlopsEnum::hVardeclrn;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>var.second.h_vardeclp-&gt;child_list.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(var.second.oldn,<sp/>hNode::hdlopsEnum::hLiteral));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hvns-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(var.second.h_vardeclp);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>HDLBody::NormalizeHcode(<ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hinp)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>break<sp/>up<sp/>chain<sp/>of<sp/>assignments<sp/>a<sp/>=<sp/>b<sp/>=<sp/>c<sp/>=<sp/>d<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>entry<sp/>there<sp/>is<sp/>a<sp/>chain<sp/>of<sp/>at<sp/>least<sp/>two:<sp/>a<sp/>=<sp/>b<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>hassignchain<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNode</ref>(hNode::hdlopsEnum::hCStmt);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>htmp<sp/>=<sp/>hinp;<sp/></highlight><highlight class="comment">//<sp/>(=<sp/>a<sp/>subtree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhnode_1_1hNode" kindref="compound">hNodep</ref><sp/>htmp2<sp/>=<sp/>htmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1];<sp/></highlight><highlight class="comment">//<sp/>(=<sp/>b<sp/>subtree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]<sp/>=<sp/>htmp2-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[0];<sp/><sp/></highlight><highlight class="comment">//<sp/>(=<sp/>a<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hassignchain-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(htmp);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htmp<sp/>=<sp/>htmp2;<sp/></highlight><highlight class="comment">//<sp/>(=<sp/>b<sp/>subtree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isAssignOp(htmp-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>[1]));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>hassignchain-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.push_back(htmp);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse(hassignchain-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.begin(),<sp/>hassignchain-&gt;<ref refid="classhnode_1_1hNode_1a6e91af95846022a423674145de0ed949" kindref="member">child_list</ref>.end());</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hassignchain;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CXXMethodDecl<sp/>*HDLBody::getEMD()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>_emd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="plugins/hdl/HDLBody.cpp"/>
  </compounddef>
</doxygen>
