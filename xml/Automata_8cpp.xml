<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Automata_8cpp" kind="file" language="C++">
    <compoundname>Automata.cpp</compoundname>
    <includes refid="Automata_8h" local="yes">Automata.h</includes>
    <incdepgraph>
      <node id="7">
        <label>clang/Analysis/CFG.h</label>
      </node>
      <node id="1">
        <label>src/SCuitable/Automata.cpp</label>
        <link refid="Automata_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="5">
        <label>clang/AST/ParentMap.h</label>
      </node>
      <node id="8">
        <label>clang/Analysis/CFGStmtMap.h</label>
      </node>
      <node id="6">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="4">
        <label>clang/AST/Expr.h</label>
      </node>
      <node id="2">
        <label>Automata.h</label>
        <link refid="Automata_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="10">
        <label>deque</label>
      </node>
      <node id="3">
        <label>clang/AST/DeclCXX.h</label>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Automata_8h" kindref="compound">Automata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="classsystemc__clang_1_1Node_1ad7a34779cad45d997bfd6d3d8043c75f" kindref="member">Node::Node</ref>()<sp/>:<sp/>_id(-1)<sp/>{}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">Node::Node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>_id(i)<sp/>{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Node::getId()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node_1a2b8af978a9b20db2bd4fe262362365f0" kindref="member">_id</ref>;<sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node_1ac7a0a758941576297cf66216f8af7db9" kindref="member">Node::addSuccessor</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Node_1a50ec07cd2bd6574c73e0e0f33c35c45d" kindref="member">_succs</ref>.insert(<ref refid="classsystemc__clang_1_1Node_1a3a402e48e9ae2e5d1a9d58a23463bb52" kindref="member">Node::connectPairType</ref>(s-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>s));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="classsystemc__clang_1_1Node_1a066a6c4cfb525c198e533be9b1878117" kindref="member">addPredecessor</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node_1a066a6c4cfb525c198e533be9b1878117" kindref="member">Node::addPredecessor</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Node_1a50deecec30b605b718d204a185e94d56" kindref="member">_preds</ref>.insert(<ref refid="classsystemc__clang_1_1Node_1a3a402e48e9ae2e5d1a9d58a23463bb52" kindref="member">Node::connectPairType</ref>(<ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>-&gt;getId(),<sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>));</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">vector&lt;int&gt;<sp/><ref refid="classsystemc__clang_1_1Node_1a60a39d782ae02c37b1fd8475c53b78b1" kindref="member">Node::getSuccessors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fromId)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>tmpSuccs;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Node::connectMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50ec07cd2bd6574c73e0e0f33c35c45d" kindref="member">_succs</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50ec07cd2bd6574c73e0e0f33c35c45d" kindref="member">_succs</ref>.end();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(it-&gt;first<sp/>==<sp/>fromId)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpSuccs.push_back(it-&gt;first);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmpSuccs;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">vector&lt;int&gt;<sp/><ref refid="classsystemc__clang_1_1Node_1a98cc154cafe1a949c40a72639484a43f" kindref="member">Node::getPredecessors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>toId)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>tmpPreds;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Node::connectMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50deecec30b605b718d204a185e94d56" kindref="member">_preds</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50deecec30b605b718d204a185e94d56" kindref="member">_preds</ref>.end();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(it-&gt;first<sp/>==<sp/>fromId)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpPreds.push_back(it-&gt;first);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmpPreds;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node_1a6b191afe5cf859d85c5d17af5d5aea15" kindref="member">Node::dump</ref>(raw_ostream<sp/>&amp;os,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>preds:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Node::connectMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50deecec30b605b718d204a185e94d56" kindref="member">_preds</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50deecec30b605b718d204a185e94d56" kindref="member">_preds</ref>.end();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>succs:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Node::connectMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50ec07cd2bd6574c73e0e0f33c35c45d" kindref="member">_succs</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Node_1a50ec07cd2bd6574c73e0e0f33c35c45d" kindref="member">_succs</ref>.end();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge_1a248f22d2315374dab5b17c2ed6c15f3a" kindref="member">Edge::Edge</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*t)<sp/>:<sp/>_id(-1),<sp/>_from(f),<sp/>_to(t)<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">Edge::Edge(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>_id(i),<sp/>_from(f),<sp/>_to(t)<sp/>{}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Edge::updateSuspensionTime(timePairType<sp/>timePair)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Edge_1a275236a8efc3e201d8b980fd0ec8b96b" kindref="member">_timeAdvanceVector</ref>.push_back(timePair);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1abfe372bacca411d0b654a0c83bed8b69" kindref="member">Edge::getId</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1a7e6c2f9e7a22ac6a2073a25c2a570972" kindref="member">_id</ref>;<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1a79bf168790e4321c86c9a53dbe5c741a" kindref="member">Edge::dump</ref>(raw_ostream<sp/>&amp;os,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Edge<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Edge_1aef197f91341fac47770628fa679fa4d6" kindref="member">_from</ref>-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Edge_1aa668e70adba85721e85887dc47dfab8a" kindref="member">_to</ref>-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1a85da4c31db3a91fc4a4907611ac7a85c" kindref="member">Edge::getToId</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1aa668e70adba85721e85887dc47dfab8a" kindref="member">_to</ref>-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>();<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1a8649bc1063d1be9387d3909b0ba36960" kindref="member">Edge::getFromId</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1aef197f91341fac47770628fa679fa4d6" kindref="member">_from</ref>-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>();<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge_1a4aa1a27ab14ccfe1b547fd9546926858" kindref="member">Edge::timeAdvanceVectorType</ref><sp/><ref refid="classsystemc__clang_1_1Edge_1a8eded928724037fb5f09f6c723c776cb" kindref="member">Edge::getTimeAdvanceVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge_1a275236a8efc3e201d8b980fd0ec8b96b" kindref="member">_timeAdvanceVector</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1ae4c72b8ac4d693c49800a4c7e273654f" kindref="member">Graph::Graph</ref>()<sp/>:<sp/>_nNodes(0),<sp/>_nEdges(0)<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*Graph::addNode()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*n<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref>(<ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1a39f2c14c0eb9e331c896313eb9bb7a14" kindref="member">Graph::nodePairType</ref>(<ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>,<sp/>n));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ae649078866f29edd91b3ceb323158e27" kindref="member">_nodeVector</ref>.push_back(n);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af13eb33fa96442fe8ccc096b8b082a91" kindref="member">_nodeIDVector</ref>.push_back(<ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>++<ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1ae60f539c9249bb68663a23920579d99e" kindref="member">Graph::addNode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*n<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1a39f2c14c0eb9e331c896313eb9bb7a14" kindref="member">Graph::nodePairType</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>n));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ae649078866f29edd91b3ceb323158e27" kindref="member">_nodeVector</ref>.push_back(n);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af13eb33fa96442fe8ccc096b8b082a91" kindref="member">_nodeIDVector</ref>.push_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>++<ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1a28c50cfbe981e0e1fa6189165676d6a6" kindref="member">Graph::addEdge</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*e<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref>(f,<sp/>t,<sp/><ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1addbac67cac024ada8cd801dbef9fabed" kindref="member">Graph::edgePairType</ref>(<ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>,<sp/>e));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>preds<sp/>and<sp/>succs<sp/>in<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>f-&gt;<ref refid="classsystemc__clang_1_1Node_1ac7a0a758941576297cf66216f8af7db9" kindref="member">addSuccessor</ref>(t);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>++<ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>in<sp/>adjacency<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.insert(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a6c0212ddb2c4e032bc508d37d1a8ae90" kindref="member">Graph::adjPairType</ref>(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref>(f-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()),<sp/>e));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1a28c50cfbe981e0e1fa6189165676d6a6" kindref="member">Graph::addEdge</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tID)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/>*t;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(fID)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeMapType::iterator<sp/>nodeFound<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(fID);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>nodeFound-&gt;second;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref>(fID);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1a39f2c14c0eb9e331c896313eb9bb7a14" kindref="member">nodePairType</ref>(fID,<sp/>f));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ae649078866f29edd91b3ceb323158e27" kindref="member">_nodeVector</ref>.push_back(f);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af13eb33fa96442fe8ccc096b8b082a91" kindref="member">_nodeIDVector</ref>.push_back(fID);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>++;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(tID)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeMapType::iterator<sp/>nodeFound<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(tID);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>nodeFound-&gt;second;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref>(tID);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1a39f2c14c0eb9e331c896313eb9bb7a14" kindref="member">nodePairType</ref>(tID,<sp/>t));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ae649078866f29edd91b3ceb323158e27" kindref="member">_nodeVector</ref>.push_back(t);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af13eb33fa96442fe8ccc096b8b082a91" kindref="member">_nodeIDVector</ref>.push_back(tID);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref>++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*e<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref>(f,<sp/>t,<sp/><ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.insert(<ref refid="classsystemc__clang_1_1Graph_1addbac67cac024ada8cd801dbef9fabed" kindref="member">Graph::edgePairType</ref>(<ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>,<sp/>e));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>preds<sp/>and<sp/>succs<sp/>in<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>f-&gt;<ref refid="classsystemc__clang_1_1Node_1ac7a0a758941576297cf66216f8af7db9" kindref="member">addSuccessor</ref>(t);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>++<ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>in<sp/>adjacency<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.insert(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a6c0212ddb2c4e032bc508d37d1a8ae90" kindref="member">Graph::adjPairType</ref>(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref>(f-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()),<sp/>e));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a1a7dd9bf6fae1e4313e953da79879547" kindref="member">Graph::getNodeID</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*n)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nodeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>it-&gt;second)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2c243b93d640a155b9b885b46c6d4dba" kindref="member">Graph::getEdgeID</ref>(<ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*e)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(edgeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.end();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second<sp/>==<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2c243b93d640a155b9b885b46c6d4dba" kindref="member">Graph::getEdgeID</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref>(f-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()))<sp/>!=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>adjMapType::iterator<sp/>edgeFound<sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref>(f-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2c243b93d640a155b9b885b46c6d4dba" kindref="member">getEdgeID</ref>(edgeFound-&gt;second);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2c243b93d640a155b9b885b46c6d4dba" kindref="member">Graph::getEdgeID</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tID)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref>(fID,<sp/>tID))<sp/>!=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>adjMapType::iterator<sp/>edgeFound<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref>(fID,<sp/>tID));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2c243b93d640a155b9b885b46c6d4dba" kindref="member">getEdgeID</ref>(edgeFound-&gt;second);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1a8a750db74890cad002240e0734da43d9" kindref="member">Graph::getEdge</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>Graph::adjMapType::iterator<sp/>fit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref>(f,<sp/>t));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fit<sp/>==<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fit-&gt;second;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1a8a750db74890cad002240e0734da43d9" kindref="member">Graph::getEdge</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*f,<sp/><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>Graph::adjMapType::iterator<sp/>fit<sp/>=</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.find(<ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref>(f-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>(),<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Node_1a3c7b8ccf4dab44216b997c5f63f11d9f" kindref="member">getId</ref>()));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fit<sp/>==<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fit-&gt;second;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*<ref refid="classsystemc__clang_1_1Graph_1a7bd159419fd64439460675934b6a998e" kindref="member">Graph::getNode</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeID)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(nodeID)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeMapType::iterator<sp/>nodeFound<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.find(nodeID);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodeFound-&gt;second;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">vector&lt;Edge<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1Graph_1a27fde3fe501aa414188b09f84ac6a923" kindref="member">Graph::getEdgesFromSource</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceID)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>vector&lt;Edge<sp/>*&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adjMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref><sp/>nodePair<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodePair.first<sp/>==<sp/>sourceID)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edges.push_back(it-&gt;second);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">vector&lt;Edge<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1Graph_1abc844b7bc921741a0dc6575c31b22478" kindref="member">Graph::getEdgesFromDest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destID)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>vector&lt;Edge<sp/>*&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adjMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">twoNodePairType</ref><sp/>nodePair<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodePair.second<sp/>==<sp/>destID)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edges.push_back(it-&gt;second);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">vector&lt;Edge<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1Graph_1a27fde3fe501aa414188b09f84ac6a923" kindref="member">Graph::getEdgesFromSource</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*sourceNode)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nodeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second<sp/>==<sp/>sourceNode)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a27fde3fe501aa414188b09f84ac6a923" kindref="member">getEdgesFromSource</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">vector&lt;Edge<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1Graph_1abc844b7bc921741a0dc6575c31b22478" kindref="member">Graph::getEdgesFromDest</ref>(<ref refid="classsystemc__clang_1_1Node" kindref="compound">Node</ref><sp/>*destNode)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nodeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second<sp/>==<sp/>destNode)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1abc844b7bc921741a0dc6575c31b22478" kindref="member">getEdgesFromDest</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a0309822fc98dfc94ffbc01f61bb91102" kindref="member">Graph::dump</ref>(raw_ostream<sp/>&amp;os,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>map:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Graph_1a71e0b7e63897c0885beb33a17af84bb1" kindref="member">_nNodes</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::nodeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second-&gt;dump(os,<sp/>tabn++);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>Edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Edge<sp/>map:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Graph_1acf09b64d745c09f15760a531faa322af" kindref="member">_nEdges</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::edgeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.end();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>it-&gt;second-&gt;dump(os,<sp/>tabn++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Adjacency<sp/>list:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::adjMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref><sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref><sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*e<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Edge<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TimeAdvance<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Edge_1a4aa1a27ab14ccfe1b547fd9546926858" kindref="member">Edge::timeAdvanceVectorType</ref><sp/>timeAdvanceVector<sp/>=<sp/>e-&gt;<ref refid="classsystemc__clang_1_1Edge_1a8eded928724037fb5f09f6c723c776cb" kindref="member">getTimeAdvanceVector</ref>();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Size<sp/>of<sp/>timeAdvanceVector<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timeAdvanceVector.size();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>timeAdvanceVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Edge_1ac7df506142cb6616af813b07f4d61689" kindref="member">Edge::timePairType</ref><sp/>timePair<sp/>=<sp/>timeAdvanceVector.at(i);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timePair.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timePair.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>e-&gt;dump(os,tabn++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a48fa649326ace942190a16774fba9fef" kindref="member">Graph::dumpSauto</ref>(raw_ostream<sp/>&amp;os,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>LangOptions<sp/>LO;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>LO.CPlusPlus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>PrintingPolicy<sp/>Policy(LO);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::adjMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.end();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1a9c540d3b0c52a6759ad3c6e10752255d" kindref="member">Graph::twoNodePairType</ref><sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref><sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Edge" kindref="compound">Edge</ref><sp/>*e<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Edge<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceparselib_1_1utils_1ab81a1e875b4ab8a6c0b13efab8be1115" kindref="member">p</ref>.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os&lt;&lt;&quot;<sp/>Transition<sp/>code<sp/>\n&quot;;</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CFGBlock*&gt;<sp/>codeBlocks<sp/>=<sp/>e-&gt;getPreStmtBlks();</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;codeBlocks.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFGBlock*<sp/>currBlock<sp/>=<sp/>codeBlocks.at(i);</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(CFGBlock::iterator<sp/>it<sp/>=<sp/>currBlock-&gt;begin(),<sp/>eit<sp/>=<sp/>currBlock-&gt;end();</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Optional<sp/>&lt;CFGStmt&gt;<sp/>cfgStmt<sp/>=<sp/>it-&gt;getAs&lt;CFGStmt&gt;())<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Stmt*<sp/>stmt<sp/>=<sp/>cfgStmt-&gt;getStmt();</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stmt-&gt;printPretty(llvm::errs(),<sp/>0,<sp/>Policy,<sp/>0);</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os&lt;&lt;&quot;\n&quot;;</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="338"><highlight class="comment">void<sp/>Graph::dumpSauto(raw_ostream&amp;<sp/>os,<sp/>int<sp/>tabn)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/>LangOptions<sp/>LO;</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>LO.CPlusPlus<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>PrintingPolicy<sp/>Policy(LO);</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>unsigned<sp/>int<sp/>state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>bool<sp/>duplicateFound;</highlight></codeline>
<codeline lineno="345"><highlight class="comment">for<sp/>(Graph::adjMapType::iterator<sp/>it<sp/>=<sp/>_adjList.begin(),<sp/>eit<sp/>=<sp/>_adjList.end();</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Graph::twoNodePairType<sp/>p<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duplicateFound<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//start<sp/>and<sp/>final<sp/>states</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;&quot;\n<sp/>q_s<sp/>:<sp/>&quot;&lt;&lt;p.first&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;&quot;<sp/>q_f<sp/>:<sp/>&quot;&lt;&lt;p.second;</highlight></codeline>
<codeline lineno="352"><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;_nodeIds.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(p.first<sp/>==<sp/>_nodeIds.at(i)){</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duplicateFound<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(duplicateFound<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nodeIds.push_back(p.first);</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>*e<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CFGBlock*&gt;<sp/>pre<sp/>=<sp/>e-&gt;getPreStmtBlks();</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;&quot;\n<sp/>B_pre<sp/>:&quot;;</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;pre.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os&lt;&lt;pre.at(i)-&gt;getBlockID()&lt;&lt;&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CFGBlock*&gt;<sp/>guard<sp/>=<sp/>e-&gt;getGuardBlks();</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;&quot;\n<sp/>Guard<sp/>:&quot;;</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;guard.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os&lt;&lt;guard.at(i)-&gt;getBlockID()&lt;&lt;&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stmt*<sp/>condition<sp/>=<sp/>guard.at(i)-&gt;getTerminator();</highlight></codeline>
<codeline lineno="374"><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CFGBlock*&gt;<sp/>post<sp/>=<sp/>e-&gt;getPostStmtBlks();</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;&quot;\n<sp/>B_post<sp/>:&quot;;</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;post.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os&lt;&lt;post.at(i)-&gt;getBlockID()&lt;&lt;&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;&quot;\n<sp/>**************************&quot;;</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="comment">}</highlight></codeline>
<codeline lineno="385"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1a4f17ef653bb8b7e86d92639f6013890f" kindref="member">Graph::adjMapType</ref><sp/><ref refid="classsystemc__clang_1_1Graph_1ab2ff50fa552965ba072a75ccf7422f5d" kindref="member">Graph::returnAdjList</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>;<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1a54442bd306bba787fcca6446837c7d60" kindref="member">Graph::nodeIDVector</ref><sp/><ref refid="classsystemc__clang_1_1Graph_1aeca7b15fa86065e5b8c808911a3d19b4" kindref="member">Graph::returnNodeIDs</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1af13eb33fa96442fe8ccc096b8b082a91" kindref="member">_nodeIDVector</ref>;<sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1acc6f301ba6e28a826613c7053c0081bd" kindref="member">Graph::edgeIDVector</ref><sp/><ref refid="classsystemc__clang_1_1Graph_1ac46b28e74c68e422c5172dad45329e5c" kindref="member">Graph::returnEdgeIDs</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a4d7a95893a2a17af3272011da782d2d8" kindref="member">_edgeIDVector</ref>;<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1a3b0352fd1dd6b94efbefa9a7371f8d96" kindref="member">Graph::nodeVector</ref><sp/><ref refid="classsystemc__clang_1_1Graph_1acc442b86231bfa1ef0ef88a955a04e2d" kindref="member">Graph::returnNodeVector</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1ae649078866f29edd91b3ceb323158e27" kindref="member">_nodeVector</ref>;<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1a5d8068c36a854814c31e59fc4c1955aa" kindref="member">Graph::edgeVector</ref><sp/><ref refid="classsystemc__clang_1_1Graph_1a1dcbedf25a43b2edc7e3c92c7f191f43" kindref="member">Graph::returnEdgeVector</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1Graph_1a2cf78aa48aae66f81e4acc6cbc4ef5e8" kindref="member">_edgeVector</ref>;<sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="classsystemc__clang_1_1Graph_1a902c5b3eacb66d60752525ab23297a95" kindref="member">Graph::~Graph</ref>()<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Responsible<sp/>for<sp/>cleaning<sp/>everything<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::nodeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.end();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><sp/>it-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>it-&gt;second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>it-&gt;second-&gt;dump(os,<sp/>tabn++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1af67d8d291a91ab917db2251f5f47431c" kindref="member">_nodeMap</ref>.clear();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>Edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Graph::edgeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.begin(),<sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.end();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1aaf346483a16338109cfe22ae77b0aea7" kindref="member">_edgeMap</ref>.clear();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1Graph_1ab664bc6281dc4128bdb4f2841585f2a4" kindref="member">_adjList</ref>.clear();</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/SCuitable/Automata.cpp"/>
  </compounddef>
</doxygen>
