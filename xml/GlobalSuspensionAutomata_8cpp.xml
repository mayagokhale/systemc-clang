<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="GlobalSuspensionAutomata_8cpp" kind="file" language="C++">
    <compoundname>GlobalSuspensionAutomata.cpp</compoundname>
    <includes refid="GlobalSuspensionAutomata_8h" local="yes">GlobalSuspensionAutomata.h</includes>
    <incdepgraph>
      <node id="52">
        <label>InterfaceDecl.h</label>
        <link refid="InterfaceDecl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>clang/AST/Decl.h</label>
      </node>
      <node id="51">
        <label>queue</label>
      </node>
      <node id="34">
        <label>clang/Basic/SourceManager.h</label>
      </node>
      <node id="29">
        <label>clang/Analysis/CFG.h</label>
      </node>
      <node id="6">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="28">
        <label>clang/AST/ParentMap.h</label>
      </node>
      <node id="30">
        <label>clang/Analysis/CFGStmtMap.h</label>
      </node>
      <node id="23">
        <label>clang/AST/PrettyPrinter.h</label>
      </node>
      <node id="5">
        <label>clang/AST/RecursiveASTVisitor.h</label>
      </node>
      <node id="1">
        <label>src/SCuitable/GlobalSuspensionAutomata.cpp</label>
        <link refid="GlobalSuspensionAutomata_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>InstanceMatcher.h</label>
        <link refid="InstanceMatcher_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>FindSimTime.h</label>
        <link refid="FindSimTime_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="40">
        <label>json.hpp</label>
      </node>
      <node id="46">
        <label>FindEntryFunctions.h</label>
        <link refid="FindEntryFunctions_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>FindTemplateTypes.h</label>
        <link refid="FindTemplateTypes_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>PortMatcher.h</label>
        <link refid="PortMatcher_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>WaitContainer.h</label>
        <link refid="WaitContainer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>NotifyContainer.h</label>
        <link refid="NotifyContainer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>GlobalSuspensionAutomata.h</label>
        <link refid="GlobalSuspensionAutomata_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>EventContainer.h</label>
        <link refid="EventContainer_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>clang/ASTMatchers/ASTMatchers.h</label>
      </node>
      <node id="9">
        <label>Model.h</label>
        <link refid="Model_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>clang/AST/Expr.h</label>
      </node>
      <node id="26">
        <label>Automata.h</label>
        <link refid="Automata_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>FindNetlist.h</label>
        <link refid="FindNetlist_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>clang/AST/Type.h</label>
      </node>
      <node id="55">
        <label>ProcessDecl.h</label>
        <link refid="ProcessDecl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>systemc-clang.h</label>
        <link refid="systemc-clang_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>Matchers.h</label>
        <link refid="Matchers_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Tree.h</label>
        <link refid="Tree_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>stack</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="54">
        <label>PortDecl.h</label>
        <link refid="PortDecl_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>sstream</label>
      </node>
      <node id="44">
        <label>ModuleInstance.h</label>
        <link refid="ModuleInstance_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>SuspensionAutomata.h</label>
        <link refid="SuspensionAutomata_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>FindNotify.h</label>
        <link refid="FindNotify_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>clang/AST/ExprCXX.h</label>
      </node>
      <node id="53">
        <label>PortBinding.h</label>
        <link refid="PortBinding_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>FindGPUMacro.h</label>
        <link refid="FindGPUMacro_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>deque</label>
      </node>
      <node id="21">
        <label>FindWait.h</label>
        <link refid="FindWait_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>FindConstructor.h</label>
        <link refid="FindConstructor_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>llvm/Support/Debug.h</label>
      </node>
      <node id="33">
        <label>Utility.h</label>
        <link refid="Utility_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>ModuleInstanceType.h</label>
        <link refid="ModuleInstanceType_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SensitivityMatcher.h</label>
        <link refid="SensitivityMatcher_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>EntryFunctionContainer.h</label>
        <link refid="EntryFunctionContainer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>clang/AST/DeclCXX.h</label>
      </node>
      <node id="37">
        <label>FindGlobalEvents.h</label>
        <link refid="FindGlobalEvents_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="56">
        <label>SignalDecl.h</label>
        <link refid="SignalDecl_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>clang/ASTMatchers/ASTMatchFinder.h</label>
      </node>
      <node id="8">
        <label>set</label>
      </node>
      <node id="47">
        <label>FindTLMInterfaces.h</label>
        <link refid="FindTLMInterfaces_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>ArrayTypeUtils.h</label>
        <link refid="ArrayTypeUtils_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="GlobalSuspensionAutomata_8h" kindref="compound">GlobalSuspensionAutomata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesystemc__clang" kindref="compound">systemc_clang</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1abb5f142fe7bd8216fd43ac3ba56c38e8" kindref="member">GlobalSuspensionAutomata::GlobalSuspensionAutomata</ref>(<ref refid="classsystemc__clang_1_1Model" kindref="compound">Model</ref><sp/>*systemCmodel,</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_ostream<sp/>&amp;os,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASTContext<sp/>*a)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>_systemcModel(systemCmodel),<sp/>_os(os),<sp/>_a(a)<sp/>{}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">GlobalSuspensionAutomata::~GlobalSuspensionAutomata()<sp/>{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aad741b181c5ecc30918fb7ba446c1cbc" kindref="member">GlobalSuspensionAutomata::initializeGpuMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GPU<sp/>map<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>is<sp/>the<sp/>global<sp/>sauto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>identify<sp/>transitions<sp/>with<sp/>the<sp/>same<sp/>time-stamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>data<sp/>structures<sp/>of<sp/>the<sp/>form<sp/>&lt;time-stamp,<sp/>vector<sp/>of<sp/>dp<sp/>segments&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>the<sp/>above<sp/>data<sp/>structure,<sp/>for<sp/>each<sp/>time-stamp<sp/>set,<sp/>we<sp/>identify<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ones<sp/>will<sp/>go<sp/>on<sp/>the<sp/>gpu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Initialize<sp/>gpu<sp/>map\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*aTransition<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.at(i);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*bTransition<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.at(j);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTransition<sp/>!=<sp/>bTransition)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>aTransitionFound<sp/>=</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(aTransition);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>bTransitionFound<sp/>=</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(bTransition);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>aTimePair<sp/>=<sp/>aTransitionFound-&gt;second;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>bTimePair<sp/>=<sp/>bTransitionFound-&gt;second;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aTimePair.first<sp/>==<sp/>bTimePair.first<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aTimePair.second<sp/>==<sp/>bTimePair.second)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transitions<sp/>with<sp/>same<sp/>time-stamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>aCodeBlocks<sp/>=<sp/>aTransition-&gt;<ref refid="classsystemc__clang_1_1Transition_1a5ba599440db041739564e02ca10936fb" kindref="member">returnCodeBlocks</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>bCodeBlocks<sp/>=<sp/>bTransition-&gt;<ref refid="classsystemc__clang_1_1Transition_1a5ba599440db041739564e02ca10936fb" kindref="member">returnCodeBlocks</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>susCFGBlockList;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>through<sp/>each<sp/>code<sp/>block<sp/>set<sp/>and<sp/>accumulate<sp/>DP<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>susCFGBlockGPUMacroMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>timePair<sp/>=<sp/>make_pair(aTimePair.first,<sp/>aTimePair.second);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.find(timePair)<sp/>==<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>aCodeBlocks.size();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(aCodeBlocks.at(k))<sp/>!=</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DP<sp/>segment<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(notInVector(susCFGBlockList,<sp/>aCodeBlocks.at(k))){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockList.push_back(aCodeBlocks.at(k));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>bCodeBlocks.size();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(bCodeBlocks.at(k))<sp/>!=</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DP<sp/>segment<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(notInVector(susCFGBlockList,<sp/>bCodeBlocks.at(k)))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockList.push_back(bCodeBlocks.at(k));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.insert(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a59af33b23c7eb23246f0d95c642cf414" kindref="member">commonTimeDPPairType</ref>(timePair,<sp/>susCFGBlockList));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commonTimeDPMapType::iterator<sp/>commonTimeFound<sp/>=</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.find(timePair);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>tmpVec<sp/>=<sp/>commonTimeFound-&gt;second;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>bCodeBlocks.size();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(bCodeBlocks.at(k))<sp/>!=</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DP<sp/>segment<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classsystemc__clang_1_1Utility_1a807a4944329acdc8c6b8b4bbf36a59a4" kindref="member">isElementPresent</ref>(tmpVec,<sp/>bCodeBlocks.at(k)))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockList.push_back(bCodeBlocks.at(k));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpVec.insert(tmpVec.end(),<sp/>susCFGBlockList.begin(),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockList.end());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.erase(timePair);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a59af33b23c7eb23246f0d95c642cf414" kindref="member">commonTimeDPPairType</ref>(timePair,<sp/>tmpVec));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>gpu<sp/>map<sp/>algo<sp/>starts<sp/>here....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>_commonTimeDPMap<sp/>and<sp/>for<sp/>each<sp/>timePair<sp/>with<sp/>more<sp/>than<sp/>one<sp/>DP<sp/>segment,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>pseudo-knapsacking<sp/>algo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(commonTimeDPMapType::iterator<sp/>cit<sp/>=<sp/>_commonTimeDPMap.begin(),</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/>cite<sp/>=<sp/>_commonTimeDPMap.end();<sp/>cit<sp/>!=<sp/>cite;<sp/>cit++)<sp/>{<sp/>_os<sp/>&lt;&lt;&quot;\nTime<sp/>:<sp/>&quot;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/>&lt;&lt;cit-&gt;first.first&lt;&lt;&quot;<sp/>&quot;<sp/>&lt;&lt;cit-&gt;first.second&lt;&lt;&quot;\n&quot;;<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>i&lt;cit-&gt;second.size();<sp/>i++)<sp/>{<sp/>_os<sp/>&lt;&lt;&quot;\n<sp/>Block<sp/>ID:<sp/>&quot;&lt;&lt;cit-&gt;second.at(i)&lt;&lt;&quot;<sp/>&quot;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>&lt;&lt;cit-&gt;second.at(i)-&gt;getBlockID();</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(commonTimeDPMapType::iterator<sp/>cit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.begin(),</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cite<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.end();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cit<sp/>!=<sp/>cite;<sp/>cit++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>timePair<sp/>=<sp/>cit-&gt;first;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Looking<sp/>at<sp/>time-pair<sp/>:<sp/>&quot;<sp/>&lt;&lt;timePair.first&lt;&lt;&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;timePair.second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>susCFGBlockList<sp/>=<sp/>cit-&gt;second;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>l<sp/>and<sp/>u<sp/>are<sp/>lower<sp/>and<sp/>upper<sp/>limits<sp/>of<sp/>the<sp/>makespan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c_ideal<sp/>and<sp/>c_actual<sp/>are<sp/>ideal<sp/>and<sp/>actual<sp/>makespan<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_ideal<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_actual<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>susCFGBlockList.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGBlockList.at(i))<sp/>!=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>DP<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockGPUMacroMapType::iterator<sp/>gpuMacroFound<sp/>=</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGBlockList.at(i));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/>gpuMacroFound-&gt;second;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>u<sp/>+<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab21b606214fb62130eb276f10a98740b" kindref="member">max</ref>(gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aa6a4895dd19fc7b3000cf3b280899967" kindref="member">getGPUTime</ref>(),<sp/>gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1abe0492628920eac96ed31fac90193917" kindref="member">getCPUTime</ref>());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Value<sp/>of<sp/>u<sp/>:<sp/>&quot;<sp/>&lt;&lt;u;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>c_actual<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(u<sp/>!=<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_ideal<sp/>=<sp/>(u<sp/>+<sp/>l)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Value<sp/>of<sp/>c_ideal<sp/>:<sp/>&quot;<sp/>&lt;&lt;c_ideal;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a6cb4e29442e0d8d53e3c073873f63e4a" kindref="member">GPUMap</ref>(c_ideal,<sp/>susCFGBlockList,<sp/>c_actual))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Changing<sp/>value<sp/>of<sp/>u<sp/>to<sp/>:<sp/>&quot;&lt;&lt;c_actual;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>c_actual;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Changing<sp/>value<sp/>of<sp/>l<sp/>to<sp/>:<sp/>&quot;&lt;&lt;c_actual;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>c_actual;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a6cb4e29442e0d8d53e3c073873f63e4a" kindref="member">GlobalSuspensionAutomata::GPUMap</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_ideal,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>susCFGBlockList,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;c_actual)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>gpuFitSusCFGVector;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>gpuUnfitSusCFGVector;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>susCFGBlockList.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGBlockList.at(i))<sp/>!=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockGPUMacroMapType::iterator<sp/>gpuMacroFound<sp/>=</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGBlockList.at(i));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/>gpuMacroFound-&gt;second;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>GPU<sp/>macro<sp/>gpu<sp/>time<sp/>:<sp/>&quot;<sp/>&lt;&lt;gpuMacro-&gt;getGPUTime()&lt;&lt;&quot;<sp/>CPU<sp/>time<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&quot;<sp/>&lt;&lt;gpuMacro-&gt;getCPUTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aa6a4895dd19fc7b3000cf3b280899967" kindref="member">getGPUTime</ref>()<sp/>&lt;=<sp/>c_ideal)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>susCFGBlockList.at(i)-&gt;addGPUFit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gpuMacro-&gt;addGPUFit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>Pushing<sp/>block<sp/>:<sp/>&quot;<sp/>&lt;&lt;susCFGBlockList.at(i)&lt;&lt;&quot;<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gpuFitSusCFGVector&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuFitSusCFGVector.push_back(susCFGBlockList.at(i));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>susCFGBlockList.at(i)-&gt;denyGPUFit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gpuMacro-&gt;denyGPUFit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuUnfitSusCFGVector.push_back(susCFGBlockList.at(i));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>arranging<sp/>susCFGblocks&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>orderedSusCFGList<sp/>=</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1acad967eb6262a3354775642a5189b92c" kindref="member">arrangeGPUSusCFGBlocks</ref>(gpuFitSusCFGVector);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;orderedSusCFGList.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_os<sp/>&lt;&lt;&quot;<sp/>&quot;&lt;&lt;orderedSusCFGList.at(i)-&gt;getBlockID()&lt;&lt;&quot;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>&quot;&lt;&lt;orderedSusCFGList.at(i);</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>_os<sp/>&lt;&lt;&quot;\n&quot;;</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>orderedSusCFGList.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[orderedSusCFGList.at(i)];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gpuTime<sp/>=<sp/>gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aa6a4895dd19fc7b3000cf3b280899967" kindref="member">getGPUTime</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>gpuTime<sp/>:<sp/>&quot;<sp/>&lt;&lt;gpuTime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>c_ideal<sp/>:<sp/>&quot;<sp/>&lt;&lt;c_ideal;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpuTime<sp/>&lt;=<sp/>c_ideal)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c_ideal<sp/>=<sp/>c_ideal<sp/>-<sp/>gpuTime;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>orderedSusCFGList.at(i)-&gt;denyGPUFit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gpuUnfitSusCFGVector.push_back(gpuFitSusCFGVector.at(i));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gpuFitSusCFGVector.erase(gpuFitSusCFGVector.begin()<sp/>+<sp/>i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>newGPUTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>newCPUTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;susCFGBlockList.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(susCFGBlockList.at(i)-&gt;isGPUFit())<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>On<sp/>GPU</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPUMacro<sp/>*gpuMacro<sp/>=</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>_susCFGBlockGPUMacroMap[susCFGBlockList.at(i)];<sp/>newGPUTime<sp/>+=</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>gpuMacro-&gt;getGPUTime();</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>On<sp/>CPU</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPUMacro<sp/>*gpuMacro<sp/>=</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>_susCFGBlockGPUMacroMap[susCFGBlockList.at(i)];<sp/>if<sp/>(newCPUTime<sp/>&lt;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>gpuMacro-&gt;getCPUTime()){<sp/>newCPUTime<sp/>=<sp/>gpuMacro-&gt;getCPUTime();</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gpuFitSusCFGVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[gpuFitSusCFGVector.at(i)];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>newGPUTime<sp/>+=<sp/>gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aa6a4895dd19fc7b3000cf3b280899967" kindref="member">getGPUTime</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gpuUnfitSusCFGVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[gpuUnfitSusCFGVector.at(i)];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCPUTime<sp/>&lt;<sp/>gpuMacro-&gt;getCPUTime())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newCPUTime<sp/>=<sp/>gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1abe0492628920eac96ed31fac90193917" kindref="member">getCPUTime</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_os<sp/>&lt;&lt;&quot;\n<sp/>new<sp/>GPUTime<sp/>:<sp/>&quot;<sp/>&lt;&lt;newGPUTime&lt;&lt;&quot;<sp/>newCPUTime<sp/>:<sp/>&quot;<sp/>&lt;&lt;newCPUTime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_actual<sp/>&gt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab21b606214fb62130eb276f10a98740b" kindref="member">max</ref>(newGPUTime,<sp/>newCPUTime))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>c_actual<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab21b606214fb62130eb276f10a98740b" kindref="member">max</ref>(newGPUTime,<sp/>newCPUTime);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gpuFitSusCFGVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gpuFitSusCFGVector.at(i)-&gt;addGPUFit();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[gpuFitSusCFGVector.at(i)]-&gt;addGPUFit();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gpuUnfitSusCFGVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gpuUnfitSusCFGVector.at(i)-&gt;denyGPUFit();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[gpuUnfitSusCFGVector.at(i)]-&gt;denyGPUFit();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">vector&lt;SusCFG<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1acad967eb6262a3354775642a5189b92c" kindref="member">GlobalSuspensionAutomata::arrangeGPUSusCFGBlocks</ref>(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>gpuFitSusCFGVector)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>leftList;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>rightList;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>middle;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpuFitSusCFGVector.size()<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gpuFitSusCFGVector;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>middle<sp/>=<sp/>gpuFitSusCFGVector.size()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>middle;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leftList.push_back(gpuFitSusCFGVector.at(i));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>middle;<sp/>i<sp/>&lt;<sp/>gpuFitSusCFGVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rightList.push_back(gpuFitSusCFGVector.at(i));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>leftList<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1acad967eb6262a3354775642a5189b92c" kindref="member">arrangeGPUSusCFGBlocks</ref>(leftList);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>rightList<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1acad967eb6262a3354775642a5189b92c" kindref="member">arrangeGPUSusCFGBlocks</ref>(rightList);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a541f7970f925e473ded30afc41d0ad0a" kindref="member">merge_sort</ref>(leftList,<sp/>rightList));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>utility<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">vector&lt;SusCFG<sp/>*&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a541f7970f925e473ded30afc41d0ad0a" kindref="member">GlobalSuspensionAutomata::merge_sort</ref>(vector&lt;SusCFG<sp/>*&gt;<sp/>leftList,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>rightList)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>orderedList;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(leftList.size()<sp/>&gt;<sp/>0<sp/>||<sp/>rightList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftList.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>rightList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*leftGPUMacro<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[leftList.back()];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*rightGPUMacro<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>[rightList.back()];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftGPUTime<sp/>=<sp/>leftGPUMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aa6a4895dd19fc7b3000cf3b280899967" kindref="member">getGPUTime</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftCPUTime<sp/>=<sp/>leftGPUMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1abe0492628920eac96ed31fac90193917" kindref="member">getCPUTime</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightGPUTime<sp/>=<sp/>rightGPUMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1abe0492628920eac96ed31fac90193917" kindref="member">getCPUTime</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightCPUTime<sp/>=<sp/>rightGPUMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1abe0492628920eac96ed31fac90193917" kindref="member">getCPUTime</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftAccFactor<sp/>=<sp/>leftCPUTime<sp/>/<sp/>leftGPUTime;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightAccFactor<sp/>=<sp/>rightCPUTime<sp/>/<sp/>rightGPUTime;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftAccFactor<sp/>&gt;=<sp/>rightAccFactor)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orderedList.push_back(leftList.back());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftList.pop_back();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orderedList.push_back(rightList.back());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightList.pop_back();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>orderedList.push_back(leftList.back());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leftList.pop_back();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rightList.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>orderedList.push_back(rightList.back());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rightList.pop_back();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>orderedList;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>utility<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab21b606214fb62130eb276f10a98740b" kindref="member">GlobalSuspensionAutomata::max</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a2e2a5da7293995d455107f520b7a91cf" kindref="member">GlobalSuspensionAutomata::annotateTransitionsDPSeg</ref>(<ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instanceId)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>codeBlockVector<sp/>=<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a5ba599440db041739564e02ca10936fb" kindref="member">returnCodeBlocks</ref>();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>codeBlockVector.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1SusCFG" kindref="compound">SusCFG</ref><sp/>*susCFGBlock<sp/>=<sp/>codeBlockVector.at(i);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>CFGBlock<sp/>*cfgBlock<sp/>=<sp/>susCFGBlock-&gt;<ref refid="classsystemc__clang_1_1SusCFG_1a5896f7a1e1132bfea080ff478698f8c1" kindref="member">getBlock</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfgBlock-&gt;getLoopTarget())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ForStmt<sp/>*cfs<sp/>=<sp/>dyn_cast&lt;ForStmt&gt;(cfgBlock-&gt;getLoopTarget()))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForStmt<sp/>*fs<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">ForStmt<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cfs);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(entryFunctionMacroMapType::iterator</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae47eb9e56122a81a612dd49c07b78d2c" kindref="member">_entryFunctionGPUMacroMap</ref>.begin(),</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae47eb9e56122a81a612dd49c07b78d2c" kindref="member">_entryFunctionGPUMacroMap</ref>.end();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindGPUMacro_1a683dfecf001a3f455e3894ac825ca1bc" kindref="member">FindGPUMacro::forStmtGPUMacroMapType</ref><sp/>gpuMacroMap<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(FindGPUMacro::forStmtGPUMacroMapType::iterator</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit<sp/>=<sp/>gpuMacroMap.begin(),</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fite<sp/>=<sp/>gpuMacroMap.end();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit<sp/>!=<sp/>fite;<sp/>fit++)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindGPUMacro_1a9bed9afe2922108381ef0ac5bb3505de" kindref="member">FindGPUMacro::forStmtInstanceIdPairType</ref><sp/>forStmtInstanceIdPair<sp/>=</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit-&gt;first;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forStmtInstanceIdPair.first<sp/>==<sp/>instanceId<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forStmtInstanceIdPair.second<sp/>==<sp/>fs)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.insert(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a56876eccc173ec3bb55c2f9fd44624e7" kindref="member">susCFGBlockGPUMacroPairType</ref>(susCFGBlock,<sp/>fit-&gt;second));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ac0312fbc7b36799105cc2f377a1a2c2b" kindref="member">GlobalSuspensionAutomata::initialise</ref>()<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a02578ca27be242f0eaf48fbe37e36254" kindref="member">_moduleInstanceMap</ref><sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1af0896e0c2ac16d8ef73e97759235c09c" kindref="member">_systemcModel</ref>-&gt;getModuleInstanceMap();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Model::moduleInstanceMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a02578ca27be242f0eaf48fbe37e36254" kindref="member">_moduleInstanceMap</ref>.begin(),</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a02578ca27be242f0eaf48fbe37e36254" kindref="member">_moduleInstanceMap</ref>.end();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ModuleDecl<sp/>*&gt;<sp/>mdVec<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mdVec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ModuleDecl<sp/>*md<sp/>=<sp/>mdVec.at(i);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;EntryFunctionContainer<sp/>*&gt;<sp/>vef<sp/>=<sp/>md-&gt;getEntryFunctionContainer();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vef.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1SuspensionAutomata_1a37823cbaa98336114b95ee6f8258979f" kindref="member">SuspensionAutomata::transitionVectorType</ref><sp/>sauto<sp/>=</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vef.at(j)-&gt;getSusAuto();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a12e17f95884cf65775acb1e05899a58a" kindref="member">entryFunctionInstanceIdPairType</ref><sp/>entryFunctionInstanceIdPair<sp/>=</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_pair(vef.at(j),<sp/>i);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.insert(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a37c48830e073af6d4a513e6ce0762729" kindref="member">instanceFunctionSautoPairType</ref>(entryFunctionInstanceIdPair,<sp/>sauto));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vef.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CXXMethodDecl<sp/>*entryFunctionDecl<sp/>=<sp/>vef.at(j)-&gt;getEntryMethod();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1FindGPUMacro" kindref="compound">FindGPUMacro</ref><sp/>findGPUMacro(entryFunctionDecl,<sp/>i,<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae47eb9e56122a81a612dd49c07b78d2c" kindref="member">_entryFunctionGPUMacroMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1abcce2a03d05d57d4d9dbc786f7edf9d1" kindref="member">entryFunctionMacroPairType</ref>(</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vef.at(j),<sp/>findGPUMacro.getForStmtGPUMacroMap()));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>instanceFunctionSautoMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.begin();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>transitionVec<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*initialState;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>transitionVec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t<sp/>=<sp/>transitionVec.at(i);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*state<sp/>=<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="classsystemc__clang_1_1State_1a643dfd2a6ebe7f21bc5697433c6d11d0" kindref="member">isInitial</ref>())<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialState<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(instanceFunctionSautoMapType::iterator</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.begin(),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.end();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>sauto<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a12e17f95884cf65775acb1e05899a58a" kindref="member">entryFunctionInstanceIdPairType</ref><sp/>entryFunctionIdPair<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sauto.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t<sp/>=<sp/>sauto.at(i);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1aab63ee606e7a5c6462e98e0cb54b880d" kindref="member">addInstanceId</ref>(entryFunctionIdPair.second);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>()-&gt;<ref refid="classsystemc__clang_1_1State_1a643dfd2a6ebe7f21bc5697433c6d11d0" kindref="member">isInitial</ref>())<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a7ca29100e3326ea10b3b06fb617aecde" kindref="member">addInitialState</ref>(initialState);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1dd6e905aaeecd749e6f1258403e9dd" kindref="member">_visitTransitionMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa98d9120219f6deb9d1c9f8bc2b03dc8" kindref="member">visitTransitionPairType</ref>(t,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.push_back(t);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.at(i);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a2e2a5da7293995d455107f520b7a91cf" kindref="member">annotateTransitionsDPSeg</ref>(t,<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a4aabdd6a096c07ec76e252096c5c34e6" kindref="member">returnInstanceId</ref>());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*initState<sp/>=<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>incomingTransitions;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>outgoingTransitions;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.at(j);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>()<sp/>==<sp/>initState)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outgoingTransitions.push_back(t);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a879dacac83edb57d5a46922bc9002e15" kindref="member">returnFinalState</ref>()<sp/>==<sp/>initState)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incomingTransitions.push_back(t);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a14b11f0d94e08f0ecb4af0f7fb88b3e8" kindref="member">_incomingTransitionsMap</ref>.insert(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aaee6cb4d3d4f63c2f860b0b83022bf78" kindref="member">stateTransitionsPairType</ref>(initState,<sp/>incomingTransitions));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab7727d723e440cce6492538fc4adbac3" kindref="member">_outgoingTransitionsMap</ref>.insert(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aaee6cb4d3d4f63c2f860b0b83022bf78" kindref="member">stateTransitionsPairType</ref>(initState,<sp/>outgoingTransitions));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">vector&lt;Transition<sp/>*&gt;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a5f17d7f6c359ed983d9d7a4ef643f904" kindref="member">GlobalSuspensionAutomata::getOutgoingTransitions</ref>(<ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab7727d723e440cce6492538fc4adbac3" kindref="member">_outgoingTransitionsMap</ref>.find(state)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab7727d723e440cce6492538fc4adbac3" kindref="member">_outgoingTransitionsMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>stateTransitionsMapType::iterator<sp/>stateFound<sp/>=</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ab7727d723e440cce6492538fc4adbac3" kindref="member">_outgoingTransitionsMap</ref>.find(state);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stateFound-&gt;second;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>ERROR<sp/>:<sp/>Could<sp/>not<sp/>find<sp/>state<sp/>in<sp/>map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a7e094423fe02ec74ca351dc96080b727" kindref="member">GlobalSuspensionAutomata::susCFGBlockGPUMacroMapType</ref></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa4036307db9207ba72c3ee12602bed21" kindref="member">GlobalSuspensionAutomata::getSusCFGBlockGPUMacroMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">vector&lt;Transition<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae953d95b5a85a8b6593bbabea84066f6" kindref="member">GlobalSuspensionAutomata::getGlobalSauto</ref>()<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a1363a55892607c0e016d70e740a57f91" kindref="member">GlobalSuspensionAutomata::entryFunctionMacroMapType</ref></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a5c29b2d9a82908fc99212b66a31dd385" kindref="member">GlobalSuspensionAutomata::getEntryFunctionMacroMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae47eb9e56122a81a612dd49c07b78d2c" kindref="member">_entryFunctionGPUMacroMap</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">vector&lt;Transition<sp/>*&gt;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a9c9a58b29db12a757c11c94cd7ff09e0" kindref="member">GlobalSuspensionAutomata::getTransitionsAtTime</ref>(timePairType<sp/>tp)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>transitionVec;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(transitionTimeMapType::iterator<sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.begin(),</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>timePair<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timePair.first<sp/>==<sp/>tp.first<sp/>&amp;&amp;<sp/>timePair.second<sp/>==<sp/>tp.second)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transitionVec.push_back(it-&gt;first);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transitionVec;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a63401a9884f8e9615b695b1dc9555b26" kindref="member">GlobalSuspensionAutomata::transitionTimeMapType</ref></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a5f28483e547807bbc4084904594e89cb" kindref="member">GlobalSuspensionAutomata::getTransitionTimeMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">GlobalSuspensionAutomata::timePairType</ref></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a99c7a6927d270bdd1086cfba84a3c190" kindref="member">GlobalSuspensionAutomata::getTimeForTransition</ref>(<ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(t)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>[t];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Cannot<sp/>find<sp/>time<sp/>of<sp/>transition<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_pair(0,<sp/>0);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">vector&lt;Transition<sp/>*&gt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a04b297442b832b6ac447b37301a351d5" kindref="member">GlobalSuspensionAutomata::</ref></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a04b297442b832b6ac447b37301a351d5" kindref="member"></ref></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a04b297442b832b6ac447b37301a351d5" kindref="member">    getIncomingTransitions</ref>(<ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a14b11f0d94e08f0ecb4af0f7fb88b3e8" kindref="member">_incomingTransitionsMap</ref>.find(state)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a14b11f0d94e08f0ecb4af0f7fb88b3e8" kindref="member">_incomingTransitionsMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>stateTransitionsMapType::iterator<sp/>stateFound<sp/>=</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a14b11f0d94e08f0ecb4af0f7fb88b3e8" kindref="member">_incomingTransitionsMap</ref>.find(state);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stateFound-&gt;second;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>ERROR<sp/>:<sp/>Could<sp/>not<sp/>find<sp/>state<sp/>in<sp/>map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1abfd7ca3cb24ae7dcaa50b204c5a61066" kindref="member">GlobalSuspensionAutomata::isNotifyCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CFGStmt<sp/>*cs)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>Stmt<sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Stmt<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cs-&gt;getStmt());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>CXXMemberCallExpr<sp/>*m<sp/>=<sp/>dyn_cast&lt;CXXMemberCallExpr&gt;(s);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getDirectCallee()-&gt;getNameInfo().getAsString()<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;notify&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a6f133dd6587f8374c3f3cd54d4d7e881" kindref="member">GlobalSuspensionAutomata::getArgumentName</ref>(Expr<sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>LangOptions<sp/>LangOpts;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>LangOpts.CPlusPlus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>PrintingPolicy<sp/>Policy(LangOpts);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>TypeS;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>llvm::raw_string_ostream<sp/>s(TypeS);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>arg-&gt;printPretty(s,<sp/>0,<sp/>Policy);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a7961bf67e1bf59f3c41c8a52f3de8c66" kindref="member">GlobalSuspensionAutomata::getNotifyEventName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CFGStmt<sp/>*cs)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>Stmt<sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Stmt<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cs-&gt;getStmt());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>CXXMemberCallExpr<sp/>*ce<sp/>=<sp/>dyn_cast&lt;CXXMemberCallExpr&gt;(s);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>MemberExpr<sp/>*m<sp/>=<sp/>dyn_cast&lt;MemberExpr&gt;(ce-&gt;getCallee());</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a6f133dd6587f8374c3f3cd54d4d7e881" kindref="member">getArgumentName</ref>(m-&gt;getBase()-&gt;IgnoreImpCasts());</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1adc9c80eb078bb6e328e19c4a423c317a" kindref="member">GlobalSuspensionAutomata::updateEventNotificationTime</ref>(<ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*tr)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>codeBlocks<sp/>=<sp/>tr-&gt;<ref refid="classsystemc__clang_1_1Transition_1a5ba599440db041739564e02ca10936fb" kindref="member">returnCodeBlocks</ref>();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>eventName;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>codeBlocks.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1SusCFG" kindref="compound">SusCFG</ref><sp/>*susCFGBlock<sp/>=<sp/>codeBlocks.at(i);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>CFGBlock<sp/>*cfgBlock<sp/>=<sp/>susCFGBlock-&gt;<ref refid="classsystemc__clang_1_1SusCFG_1a5896f7a1e1132bfea080ff478698f8c1" kindref="member">getBlock</ref>();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CFGBlock::iterator<sp/>it<sp/>=<sp/>cfgBlock-&gt;begin(),<sp/>eit<sp/>=<sp/>cfgBlock-&gt;end();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Optional&lt;CFGStmt&gt;<sp/>cs<sp/>=<sp/>it-&gt;getAs&lt;CFGStmt&gt;())<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CFGStmt<sp/>*s<sp/>=<sp/>(CFGStmt<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)&amp;cs;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1abfd7ca3cb24ae7dcaa50b204c5a61066" kindref="member">isNotifyCall</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventName<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a7961bf67e1bf59f3c41c8a52f3de8c66" kindref="member">getNotifyEventName</ref>(s);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>simCycles<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(tr)<sp/>!=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>transitionTimeFound<sp/>=</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(tr);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae3682ee2abc6d4ff164d1b6265807d75" kindref="member">_eventNotificationTimeMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a87b9935e2a92ea9266a4daa89de48a0c" kindref="member">eventNotificationTimePairType</ref>(</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventName,<sp/>transitionTimeFound-&gt;second));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>ERROR<sp/>:<sp/>Cannot<sp/>find<sp/>transition<sp/>time&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afb504ec049dce4f340d6ee44de5d096f" kindref="member">GlobalSuspensionAutomata::updateTransitionTime</ref>(<ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*tr)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*state<sp/>=<sp/>tr-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="classsystemc__clang_1_1State_1a643dfd2a6ebe7f21bc5697433c6d11d0" kindref="member">isInitial</ref>())<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc94bfa7f93a5a0fb01483dea38046c6" kindref="member">transitionTimePairType</ref>(tr,<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref>(0.0,<sp/>0)));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="classsystemc__clang_1_1State_1a0ab7a0ef45c4b14ee93c4164643d7316" kindref="member">isDelta</ref>())<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>transitionVec<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a04b297442b832b6ac447b37301a351d5" kindref="member">getIncomingTransitions</ref>(state);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>simTime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>transitionVec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(transitionVec.at(i))<sp/>!=</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>transitionFound<sp/>=</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(transitionVec.at(i));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simTime<sp/>&lt;<sp/>transitionFound-&gt;second.first)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simTime<sp/>=<sp/>transitionFound-&gt;second.first;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTime<sp/>=<sp/>transitionFound-&gt;second.second<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.insert(</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc94bfa7f93a5a0fb01483dea38046c6" kindref="member">transitionTimePairType</ref>(tr,<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref>(simTime,<sp/>deltaTime)));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="classsystemc__clang_1_1State_1adcde585e5b1df5f64df6f0a194c901f7" kindref="member">isTimed</ref>())<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>transitionVec<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a04b297442b832b6ac447b37301a351d5" kindref="member">getIncomingTransitions</ref>(state);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>simTime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>transitionVec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(transitionVec.at(i))<sp/>!=</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>transitionFound<sp/>=</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(transitionVec.at(i));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simTime<sp/>&lt;=<sp/>transitionFound-&gt;second.first)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simTime<sp/>=<sp/>transitionFound-&gt;second.first<sp/>+<sp/>state-&gt;<ref refid="classsystemc__clang_1_1State_1acf009bf9bd20107ee1220c4315a1222b" kindref="member">getSimTime</ref>();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTime<sp/>=<sp/>transitionFound-&gt;second.second;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.insert(</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc94bfa7f93a5a0fb01483dea38046c6" kindref="member">transitionTimePairType</ref>(tr,<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref>(simTime,<sp/>deltaTime)));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;<ref refid="classsystemc__clang_1_1State_1a2ea429b1fcd285943367cfe8a3f65c1d" kindref="member">isEvent</ref>())<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae3682ee2abc6d4ff164d1b6265807d75" kindref="member">_eventNotificationTimeMap</ref>.find(state-&gt;<ref refid="classsystemc__clang_1_1State_1a2bc5bfac607d8519452737899137b4c0" kindref="member">getEventName</ref>())<sp/>==</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae3682ee2abc6d4ff164d1b6265807d75" kindref="member">_eventNotificationTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventNotificationTimeMapType::iterator<sp/>eventFound<sp/>=</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae3682ee2abc6d4ff164d1b6265807d75" kindref="member">_eventNotificationTimeMap</ref>.find(state-&gt;<ref refid="classsystemc__clang_1_1State_1a2bc5bfac607d8519452737899137b4c0" kindref="member">getEventName</ref>());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc94bfa7f93a5a0fb01483dea38046c6" kindref="member">transitionTimePairType</ref>(tr,<sp/>eventFound-&gt;second));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>ERROR<sp/>:<sp/>Unknown<sp/>state<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1af343d5bf1434341a724d44faf24cbd2e" kindref="member">GlobalSuspensionAutomata::genGSauto</ref>()<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/>&quot;\n<sp/>Global<sp/>Sauto\n&quot;;</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/>&quot;\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n&quot;;</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_globalSauto.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>_globalSauto.at(i)-&gt;dump(_os);</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/>llvm::errs()<sp/>&lt;&lt;<sp/>&quot;\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n&quot;;</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>deque&lt;Transition<sp/>*&gt;<sp/>transitionQueue;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="classsystemc__clang_1_1State" kindref="compound">State</ref><sp/>*initialState;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*t<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1a92362fa42f934fe5a8f23f5e11d16" kindref="member">_globalSauto</ref>.at(i);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>()-&gt;<ref refid="classsystemc__clang_1_1State_1a643dfd2a6ebe7f21bc5697433c6d11d0" kindref="member">isInitial</ref>())<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialState<sp/>=<sp/>t-&gt;<ref refid="classsystemc__clang_1_1Transition_1a8304ac8c1ca0ab8675321f846c52f81f" kindref="member">returnInitialState</ref>();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>initialTransitions<sp/>=</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a5f17d7f6c359ed983d9d7a4ef643f904" kindref="member">getOutgoingTransitions</ref>(initialState);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>initialTransitions.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>transitionQueue.push_back(initialTransitions.at(i));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(transitionQueue.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1Transition" kindref="compound">Transition</ref><sp/>*tr<sp/>=<sp/>transitionQueue.front();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afb504ec049dce4f340d6ee44de5d096f" kindref="member">updateTransitionTime</ref>(tr))<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transitionQueue.pop_front();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1dd6e905aaeecd749e6f1258403e9dd" kindref="member">_visitTransitionMap</ref>.erase(tr);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1dd6e905aaeecd749e6f1258403e9dd" kindref="member">_visitTransitionMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa98d9120219f6deb9d1c9f8bc2b03dc8" kindref="member">visitTransitionPairType</ref>(tr,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transitionQueue.pop_front();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transitionQueue.push_back(tr);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1dd6e905aaeecd749e6f1258403e9dd" kindref="member">_visitTransitionMap</ref>.insert(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa98d9120219f6deb9d1c9f8bc2b03dc8" kindref="member">visitTransitionPairType</ref>(tr,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1adc9c80eb078bb6e328e19c4a423c317a" kindref="member">updateEventNotificationTime</ref>(tr);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>outgoingTransitions<sp/>=</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a5f17d7f6c359ed983d9d7a4ef643f904" kindref="member">getOutgoingTransitions</ref>(tr-&gt;<ref refid="classsystemc__clang_1_1Transition_1a879dacac83edb57d5a46922bc9002e15" kindref="member">returnFinalState</ref>());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outgoingTransitions.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae1dd6e905aaeecd749e6f1258403e9dd" kindref="member">_visitTransitionMap</ref>[outgoingTransitions.at(i)]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionQueue.push_back(outgoingTransitions.at(i));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a125522232acb8c31eb9bac5ba062a59d" kindref="member">GlobalSuspensionAutomata::dump</ref>()<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(instanceFunctionSautoMapType::iterator</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.begin(),</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1aa88e19635275dcf98ca87f34a18cd776" kindref="member">_instanceFunctionSautoMap</ref>.end();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>eit;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>############################################\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Instance<sp/>Name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first.first;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Function<sp/>Name<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first.first-&gt;getName();</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Transition<sp/>*&gt;<sp/>sauto<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sauto.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Transition<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sauto.at(i);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sauto.at(i)-&gt;dump(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scheduled<sp/>time-stamps<sp/>for<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(sauto.at(i))<sp/>!=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitionTimeMapType::iterator<sp/>transitionTimeFound<sp/>=</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a75a3cb959657bf75967419d5bf9e7421" kindref="member">_transitionTimeMap</ref>.find(sauto.at(i));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Sim<sp/>Cycles<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>transitionTimeFound-&gt;second.first</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Delta<sp/>cycles<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>transitionTimeFound-&gt;second.second;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(commonTimeDPMapType::iterator<sp/>cit<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.begin(),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cite<sp/>=<sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ae81a2156319d9b225bb6ee85bee957b5" kindref="member">_commonTimeDPMap</ref>.end();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cit<sp/>!=<sp/>cite;<sp/>cit++)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1ad5b1dd2561dc533cb37ffa28c36c42e4" kindref="member">timePairType</ref><sp/>timePair<sp/>=<sp/>cit-&gt;first;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;SusCFG<sp/>*&gt;<sp/>susCFGList<sp/>=<sp/>cit-&gt;second;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>Time<sp/>Pair<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timePair.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timePair.second;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>SusCFG*<sp/>DP<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>susCFGList.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGList.at(j))<sp/>!=</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>DP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>susCFGList.at(j)-&gt;getBlockID();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>susCFGBlockGPUMacroMapType::iterator<sp/>DPCodeBlockFound<sp/>=</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1afc72d8f6d8094cfa0076217c415f7ff3" kindref="member">_susCFGBlockGPUMacroMap</ref>.find(susCFGList.at(j));</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GPUMacro" kindref="compound">GPUMacro</ref><sp/>*gpuMacro<sp/>=<sp/>DPCodeBlockFound-&gt;second;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuMacro-&gt;<ref refid="classsystemc__clang_1_1GPUMacro_1aebb803764900c516e481a1de86b0ab9e" kindref="member">dump</ref>(<ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(susCFGList.at(j)-&gt;isGPUFit())<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsystemc__clang_1_1GlobalSuspensionAutomata_1a07a0cdab13d25f006b411f16363f83dc" kindref="member">_os</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>SusCFG<sp/>Block<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>susCFGList.at(j)-&gt;getBlockID()</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>marked<sp/>for<sp/>GPU<sp/>execution\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/SCuitable/GlobalSuspensionAutomata.cpp"/>
  </compounddef>
</doxygen>
